{
  "openapi": "3.1.0",
  "info": {
    "title": "Audiobookshelf API",
    "version": "1.0.0",
    "description": "Audiobookshelf API with autogenerated OpenAPI doc"
  },
  "paths": {
    "/api/authors/{id}": {
      "get": {
        "operationId": "getAuthorByID",
        "summary": "Get a single author by ID on server",
        "tags": [
          "Authors"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/authorID"
          },
          {
            "$ref": "#/components/parameters/authorInclude"
          },
          {
            "$ref": "#/components/parameters/authorLibraryId"
          }
        ],
        "responses": {
          "200": {
            "description": "Author OK",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/author"
                    },
                    {
                      "$ref": "#/components/schemas/authorWithItems"
                    },
                    {
                      "$ref": "#/components/schemas/authorWithSeries"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/author404"
          }
        }
      },
      "patch": {
        "operationId": "updateAuthorByID",
        "summary": "Update a single author by ID on server. This endpoint will merge two authors if the new author name matches another author in the database.",
        "tags": [
          "Authors"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/authorID"
          },
          {
            "$ref": "#/components/parameters/asin"
          },
          {
            "$ref": "#/components/parameters/authorName"
          },
          {
            "$ref": "#/components/parameters/authorDescription"
          },
          {
            "$ref": "#/components/parameters/authorImagePath"
          }
        ],
        "responses": {
          "200": {
            "description": "Author OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/author"
                    },
                    {
                      "properties": null,
                      "merged": {
                        "description": "Will only exist and be `true` if the author was merged with another author",
                        "type": [
                          "boolean",
                          "null"
                        ]
                      },
                      "updated": {
                        "description": "Whether the author was updated without errors. Will not exist if author was merged.",
                        "type": [
                          "boolean",
                          "null"
                        ]
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/author404"
          }
        }
      },
      "delete": {
        "operationId": "deleteAuthorByID",
        "summary": "Delete a single author by ID on server and remove author from all books.",
        "tags": [
          "Authors"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/authorID"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ok200"
          },
          "404": {
            "$ref": "#/components/responses/author404"
          }
        }
      }
    },
    "/api/authors/{id}/image": {
      "post": {
        "operationId": "setAuthorImageByID",
        "summary": "Set an author image using a provided URL.",
        "tags": [
          "Authors"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/authorID"
          },
          {
            "$ref": "#/components/parameters/imageURL"
          }
        ],
        "responses": {
          "200": {
            "description": "Author OK",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/author"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/author404"
          }
        }
      },
      "delete": {
        "operationId": "deleteAuthorImageByID",
        "summary": "Delete an author image from the server and remove the image from the database.",
        "tags": [
          "Authors"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/authorID"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ok200"
          },
          "404": {
            "$ref": "#/components/responses/author404"
          }
        }
      },
      "patch": {
        "operationId": "getAuthorImageByID",
        "summary": "Return the author image by author ID.",
        "tags": [
          "Authors"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/authorID"
          },
          {
            "$ref": "#/components/parameters/imageWidth"
          },
          {
            "$ref": "#/components/parameters/imageHeight"
          },
          {
            "$ref": "#/components/parameters/imageFormat"
          },
          {
            "$ref": "#/components/parameters/imageRaw"
          }
        ],
        "responses": {
          "200": {
            "description": "Author OK",
            "content": {
              "image/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/author404"
          }
        }
      }
    },
    "/api/authors/{id}/match": {
      "post": {
        "operationId": "matchAuthorByID",
        "summary": "Match the author against Audible using quick match. Quick match updates the author's description and image (if no image already existed) with information from audible. Either `asin` or `q` must be provided, with `asin` taking priority if both are provided.",
        "tags": [
          "Authors"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/authorID"
          },
          {
            "$ref": "#/components/parameters/asin"
          },
          {
            "$ref": "#/components/parameters/authorSearchName"
          }
        ],
        "responses": {
          "200": {
            "description": "Author OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/author"
                    },
                    {
                      "properties": null,
                      "updated": {
                        "description": "Whether the author was updated without errors. Will not exist if author was merged.",
                        "type": [
                          "boolean",
                          "null"
                        ]
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/author404"
          }
        }
      }
    },
    "/api/collections": {
      "post": {
        "operationId": "createCollection",
        "summary": "Create a new collection",
        "tags": [
          "Collections"
        ],
        "requestBody": {
          "description": "Data for creating a new collection",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "books": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": "name"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Collection created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/collection"
                }
              }
            }
          },
          "400": {
            "description": "Invalid collection data"
          }
        }
      },
      "get": {
        "operationId": "getAllCollections",
        "summary": "Get all collections",
        "deprecated": true,
        "tags": [
          "Collections"
        ],
        "responses": {
          "200": {
            "description": "Collection created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/collectionExpanded"
                }
              }
            }
          }
        }
      }
    },
    "/api/collections/{id}": {
      "patch": {
        "operationId": "updateCollection",
        "summary": "Update an existing collection",
        "tags": [
          "Collections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Collection ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Data for updating an existing collection",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "libraryId": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "books": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Collection created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/collectionExpanded"
                }
              }
            }
          },
          "403": {
            "description": "A user with update permissions is required to update collections"
          },
          "404": {
            "description": "No collection with the specified ID exists"
          }
        }
      },
      "delete": {
        "operationId": "deleteCollection",
        "summary": "Delete specified collection",
        "tags": [
          "Collections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Collection ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Collection created successfully"
          },
          "403": {
            "description": "A user with delete permissions is required to delete a collection"
          },
          "404": {
            "description": "No collection with the specified ID exists"
          }
        }
      }
    },
    "/api/collections/{id}/book": {
      "post": {
        "operationId": "collectionAddBook",
        "summary": "Add a single book to a collection",
        "tags": [
          "Collections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Collection ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Data for adding a single book to a collection",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "libraryId": {
                    "type": "string"
                  },
                  "books": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/collectionExpanded"
                }
              }
            }
          },
          "400": {
            "description": "The provided library ID could not be found, is in a different library, or is already in a collection"
          },
          "403": {
            "description": "A user with update permissions is required to update collections"
          },
          "404": {
            "description": "No collection with the specified ID exists"
          }
        }
      }
    },
    "/api/collections/{id}/book/{bookId}": {
      "delete": {
        "operationId": "collectionRemoveBook",
        "summary": "Remove a single book from a collection",
        "tags": [
          "Collections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Collection ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bookId",
            "in": "path",
            "description": "Book ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/collectionExpanded"
                }
              }
            }
          },
          "403": {
            "description": "A user with update permissions is required to update collections"
          },
          "404": {
            "description": "No collection with the specified ID exists"
          }
        }
      }
    },
    "/api/collections/{id}/batch/add": {
      "post": {
        "operationId": "batchAddToCollection",
        "summary": "Batch add books to an existing collection",
        "tags": [
          "Collections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Collection ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Data for updating an existing collection",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "books": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Collection created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/collectionExpanded"
                }
              }
            }
          },
          "403": {
            "description": "A user with update permissions is required to update collections"
          },
          "404": {
            "description": "No collection with the specified ID exists"
          },
          "500": {
            "description": "The provided `books` array must not be empty"
          }
        }
      }
    },
    "/api/collections/{id}/batch/remove": {
      "post": {
        "operationId": "batchRemoveFromCollection",
        "summary": "Batch remove books from a collection",
        "tags": [
          "Collections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Collection ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Data for updating an existing collection",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "books": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Books removed from collection successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/collectionExpanded"
                }
              }
            }
          },
          "403": {
            "description": "A user with update permissions is required to update collections"
          },
          "404": {
            "description": "No collection with the specified ID exists"
          },
          "500": {
            "description": "The provided `books` array must not be empty"
          }
        }
      }
    },
    "/api/libraries": {
      "post": {
        "operationId": "createLibrary",
        "summary": "Create a library with the specified name",
        "tags": [
          "Libraries"
        ],
        "requestBody": {
          "description": "Data used to create the new library",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "folders"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "My Audiobook Library"
                  },
                  "folders": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/folder"
                    }
                  },
                  "icon": {
                    "type": "string",
                    "description": "The icon for the libary.",
                    "default": "database"
                  },
                  "mediaType": {
                    "type": "string",
                    "description": "The type of media content for the library",
                    "enum": [
                      "book",
                      "podcast"
                    ],
                    "default": "book"
                  },
                  "provider": {
                    "type": "string",
                    "description": "The default provider for the library",
                    "default": "google"
                  },
                  "settings": {
                    "$ref": "#/components/schemas/librarySettings"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/library200"
          }
        }
      },
      "get": {
        "operationId": "getAllLibraries",
        "summary": "Get all libraries on server",
        "tags": [
          "Libraries"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/library200"
          }
        }
      }
    },
    "/api/libraries/{id}": {
      "get": {
        "operationId": "getLibraryByID",
        "summary": "Get a single library by ID on server",
        "tags": [
          "Libraries"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/libraryID"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/library200"
          },
          "404": {
            "$ref": "#/components/responses/library404"
          }
        }
      },
      "delete": {
        "operationId": "deleteLibraryByID",
        "summary": "Delete a single library by ID on the server",
        "tags": [
          "Libraries"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/libraryID"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/library200"
          },
          "404": {
            "$ref": "#/components/responses/library404"
          }
        }
      }
    },
    "/api/libraries/{id}/episode-downloads": {
      "get": {
        "operationId": "getEpisodeDownloadsByLibrary",
        "summary": "Get the episode downloads for a single library by ID",
        "tags": [
          "Libraries"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/libraryID"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "currentDownload": {
                      "$ref": "#/components/schemas/podcastEpisodeDownload"
                    },
                    "queue": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/podcastEpisodeDownload"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/library404"
          }
        }
      }
    },
    "/api/libraries/{id}/items": {
      "get": {
        "operationId": "getLibraryItemsFromLibrary",
        "summary": "Get media items",
        "parameters": [
          {
            "$ref": "#/components/parameters/libraryID"
          },
          {
            "$ref": "#/components/parameters/librarySortBy"
          },
          {
            "$ref": "#/components/parameters/librarySortDesc"
          },
          {
            "$ref": "#/components/parameters/libraryLimit"
          },
          {
            "$ref": "#/components/parameters/libraryPage"
          },
          {
            "name": "filterBy",
            "in": "query",
            "description": "Filter media items by author",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "array",
                      "description": "Array of library items",
                      "items": {
                        "$ref": "#/components/schemas/libraryItem"
                      }
                    },
                    "total": {
                      "$ref": "#/components/schemas/resultsTotal"
                    },
                    "limit": {
                      "type": "integer"
                    },
                    "page": {
                      "type": "integer"
                    },
                    "sortBy": {
                      "type": "string"
                    },
                    "sortDesc": {
                      "type": "boolean"
                    },
                    "filterBy": {
                      "type": "string"
                    },
                    "mediaType": {
                      "$ref": "#/components/schemas/mediaType"
                    },
                    "minified": {
                      "type": "boolean"
                    },
                    "collapseseries": {
                      "type": "boolean"
                    },
                    "include": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/libraries/{id}/issues": {
      "delete": {
        "operationId": "deleteLibraryIssuesByID",
        "summary": "Remove all library items that have issues in the given library.",
        "tags": [
          "Libraries"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/libraryID"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ok200"
          },
          "404": {
            "$ref": "#/components/responses/library404"
          }
        }
      }
    },
    "/api/libraries/{id}/collections": {
      "get": {
        "operationId": "getLibraryCollections",
        "summary": "Get all collections in a library",
        "tags": [
          "Library"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/libraryID"
          }
        ],
        "responses": {
          "200": {
            "description": "Collection created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/collectionExpanded"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/items/{id}": {
      "get": {
        "operationId": "getLibraryItem",
        "summary": "Get a library item",
        "tags": [
          "Items"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Library Item ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Got the library item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/libraryItem"
                }
              }
            }
          },
          "400": {
            "description": "Invalid collection data"
          }
        }
      }
    },
    "/ping": {
      "get": {
        "operationId": "pingServer",
        "description": "Endpoint to check if the server is alive and responding with JSON correctly.",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/login": {
      "get": {
        "operationId": "loginGet",
        "summary": "This is only to prevent some linting errors, does not actually exist",
        "deprecated": true
      },
      "post": {
        "operationId": "login",
        "summary": "Login endpoint",
        "description": "Endpoint to authenticate a user.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful login",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "$ref": "#/components/schemas/user"
                    },
                    "userDefaultLibraryId": {
                      "type": "string"
                    },
                    "serverSettings": {
                      "$ref": "#/components/schemas/serverSettings"
                    },
                    "source": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Unauthorized access"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "parameters": {
      "authorID": {
        "name": "id",
        "in": "path",
        "description": "Author ID",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "authorInclude": {
        "name": "include",
        "in": "query",
        "description": "A comma separated list of what to include with the author. The options are `items` and `series`. `series` will only have an effect if `items` is included.",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "authorLibraryId": {
        "name": "library",
        "in": "query",
        "description": "The ID of the library to to include filter included items from.",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/libraryId"
        }
      },
      "asin": {
        "name": "asin",
        "in": "query",
        "description": "The Audible Identifier (ASIN).",
        "required": false,
        "schema": {
          "type": [
            "string",
            "null"
          ]
        }
      },
      "authorSearchName": {
        "name": "q",
        "in": "query",
        "description": "The name of the author to use for searching.",
        "required": false,
        "schema": {
          "type": "string",
          "example": "Terry Goodkind"
        }
      },
      "authorName": {
        "name": "name",
        "in": "query",
        "description": "The name of the author.",
        "required": false,
        "schema": {
          "type": "string",
          "example": "Terry Goodkind"
        }
      },
      "authorDescription": {
        "name": "description",
        "in": "query",
        "description": "A description of the author. Will be null if there is none.",
        "required": false,
        "schema": {
          "type": [
            "string",
            "null"
          ],
          "example": "Terry Goodkind is a"
        }
      },
      "authorImagePath": {
        "name": "imagePath",
        "in": "query",
        "description": "The absolute path for the author image. Will be null if there is no image.",
        "required": false,
        "schema": {
          "type": [
            "string",
            "null"
          ],
          "example": "/metadata/authors/aut_z3leimgybl7uf3y4ab.jpg"
        }
      },
      "imageURL": {
        "name": "url",
        "in": "query",
        "description": "The URL of the image to add to the server",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "imageWidth": {
        "name": "width",
        "in": "query",
        "description": "The requested width of image in pixels.",
        "schema": {
          "type": "integer",
          "default": 400
        }
      },
      "imageHeight": {
        "name": "height",
        "in": "query",
        "description": "The requested height of image in pixels. If `null`, the height is scaled to maintain aspect ratio based on the requested width.",
        "schema": {
          "type": [
            "integer",
            "null"
          ],
          "default": null
        }
      },
      "imageFormat": {
        "name": "format",
        "in": "query",
        "description": "The requested output format.",
        "schema": {
          "type": "string",
          "default": "jpeg"
        }
      },
      "imageRaw": {
        "name": "raw",
        "in": "query",
        "description": "Return the raw image without scaling if true.",
        "schema": {
          "type": "boolean",
          "default": false
        }
      },
      "libraryID": {
        "name": "id",
        "in": "path",
        "description": "Library ID",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "librarySortBy": {
        "name": "sortBy",
        "in": "query",
        "description": "Sort media items by a specific field",
        "schema": {
          "type": "string"
        }
      },
      "librarySortDesc": {
        "name": "sortDesc",
        "in": "query",
        "description": "Whether to sort in descending order",
        "schema": {
          "type": "boolean"
        }
      },
      "libraryLimit": {
        "name": "limit",
        "in": "query",
        "description": "Maximum number of items to return. If `0`, no limit will be applied.",
        "schema": {
          "type": "integer"
        }
      },
      "libraryPage": {
        "name": "page",
        "in": "query",
        "description": "Page number for pagination. Only applies if a limit has been set.",
        "schema": {
          "type": "integer"
        }
      }
    },
    "responses": {
      "ok200": {
        "description": "OK"
      },
      "author404": {
        "description": "Author not found.",
        "content": {
          "text/html": {
            "schema": {
              "type": "string",
              "example": "Not found"
            }
          }
        }
      },
      "library200": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/library"
            }
          }
        }
      },
      "library404": {
        "description": "Library not found or user does not have access to library.",
        "content": {
          "text/html": {
            "schema": {
              "type": "string",
              "example": "Not found"
            }
          }
        }
      }
    },
    "schemas": {
      "resultsTotal": {
        "description": "How many results were returned",
        "type": "integer",
        "minimum": 0
      },
      "backup": {
        "type": "object",
        "properties": {
          "id": {
            "description": "The ID of the backup. Will be the date and time when the backup was created.",
            "type": "string",
            "example": "2022-11-14T0130"
          },
          "backupMetadataCovers": {
            "description": "Whether the backup includes library item covers and author images located in metadata.",
            "type": "boolean",
            "example": true
          },
          "backupDirPath": {
            "description": "The backup directory path.",
            "type": "string",
            "example": "/metadata/backups"
          },
          "datePretty": {
            "description": "The date and time when the backup was created in a human-readable format.",
            "type": "string",
            "example": "Mon, Nov 14 2022 01:30"
          },
          "fullPath": {
            "description": "The full path of the backup on the server.",
            "type": "string",
            "example": "/metadata/backups/2022-11-14T0130.audiobookshelf"
          },
          "path": {
            "description": "The path of the backup relative to the metadata directory.",
            "type": "string",
            "example": "backups/2022-11-14T0130.audiobookshelf"
          },
          "filename": {
            "description": "The filename of the backup.",
            "type": "string",
            "example": "2022-11-14T0130.audiobookshelf"
          },
          "fileSize": {
            "$ref": "#/components/schemas/size"
          },
          "createdAt": {
            "$ref": "#/components/schemas/createdAt"
          },
          "serverVersion": {
            "description": "The version of the server when the backup was created.",
            "type": "string",
            "example": "2.2.4"
          }
        }
      },
      "collectionBase": {
        "type": "object",
        "description": "A public collection of library items which can be ordered and has a description, base schema.",
        "properties": {
          "id": {
            "description": "The ID of the collection.",
            "type": "string"
          },
          "libraryId": {
            "description": "The ID of the library the collection belongs to.",
            "type": "string"
          },
          "name": {
            "description": "The name of the collection.",
            "type": "string"
          },
          "description": {
            "description": "The description of the collection.",
            "type": [
              "string",
              null
            ]
          },
          "lastUpdate": {
            "description": "The time (in ms since POSIX epoch) when the collection was last updated.",
            "type": "integer"
          },
          "createdAt": {
            "description": "The time (in ms since POSIX epoch) when the collection was created.",
            "type": "integer"
          }
        }
      },
      "collection": {
        "type": "object",
        "description": "A public collection of library items which can be ordered and has a description.",
        "allOf": [
          {
            "$ref": "#/components/schemas/collectionBase"
          },
          {
            "books": {
              "description": "The books that belong to the collection.",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/libraryItem"
              }
            }
          }
        ]
      },
      "collectionExpanded": {
        "type": "object",
        "description": "A public collection of library items which can be ordered and has a description. Replaces `libraryItem` with `libraryItemExtended`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/collectionBase"
          },
          {
            "books": {
              "description": "The books that belong to the collection.",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/libraryItemExpanded"
              }
            }
          }
        ]
      },
      "addedAt": {
        "type": "integer",
        "description": "The time (in ms since POSIX epoch) when added to the server.",
        "example": 1633522963509
      },
      "createdAt": {
        "type": "integer",
        "description": "The time (in ms since POSIX epoch) when was created.",
        "example": 1633522963509
      },
      "updatedAt": {
        "type": "integer",
        "description": "The time (in ms since POSIX epoch) when last updated.",
        "example": 1633522963509
      },
      "tags": {
        "description": "Tags applied to items.",
        "type": "array",
        "items": {
          "type": "string"
        },
        "examples": [
          "Favorite",
          "Nonfiction/History",
          {
            "Content": "Violence"
          }
        ]
      },
      "size": {
        "description": "The total size (in bytes) of the item or file.",
        "type": "integer",
        "example": 268824228
      },
      "durationSec": {
        "description": "The total length (in seconds) of the item or file.",
        "type": "number",
        "example": 33854.905
      },
      "deviceInfo": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier.",
            "type": "string",
            "example": "69b7e852-23a6-4587-bed3-6a5966062e38",
            "format": "uuid"
          },
          "userId": {
            "description": "User identifier.",
            "type": "string",
            "example": "3c479fe6-6bf8-44e4-a4a6-680c768b501c",
            "format": "uuid"
          },
          "deviceId": {
            "description": "Device identifier, as provided in the request.",
            "type": "string",
            "example": "4dd05e7fadca538b"
          },
          "ipAddress": {
            "description": "The IP address that the request came from.",
            "type": [
              "string",
              "null"
            ],
            "example": "192.168.1.118",
            "format": "ipv4"
          },
          "browserName": {
            "description": "The browser name, taken from the user agent.",
            "type": [
              "string",
              "null"
            ],
            "example": "Firefox"
          },
          "browserVersion": {
            "description": "The browser version, taken from the user agent.",
            "type": [
              "string",
              "null"
            ],
            "example": "106.0"
          },
          "osName": {
            "description": "The name of OS, taken from the user agent.",
            "type": [
              "string",
              "null"
            ],
            "example": "Linux"
          },
          "osVersion": {
            "description": "The version of the OS, taken from the user agent.",
            "type": [
              "string",
              "null"
            ],
            "example": "x86_64"
          },
          "deviceName": {
            "description": "The device name, constructed automatically from other attributes.",
            "type": [
              "string",
              "null"
            ]
          },
          "deviceType": {
            "description": "The device name, constructed automatically from other attributes.",
            "type": [
              "string",
              "null"
            ]
          },
          "manufacturer": {
            "description": "The client device's manufacturer, as provided in the request.",
            "type": [
              "string",
              "null"
            ]
          },
          "model": {
            "description": "The client device's model, as provided in the request.",
            "type": [
              "string",
              "null"
            ]
          },
          "sdkVersion": {
            "description": "For an Android device, the Android SDK version of the client, as provided in the request.",
            "type": [
              "string",
              "null"
            ]
          },
          "clientName": {
            "description": "Name of the client, as provided in the request.",
            "type": "string",
            "example": "Abs Web"
          },
          "clientVersion": {
            "description": "Version of the client, as provided in the request.",
            "type": "string",
            "example": "2.3.3"
          }
        }
      },
      "oldAuthorId": {
        "description": "The ID of authors on server version 2.2.23 and before.",
        "type": "string",
        "format": "aut_[a-z0-9]{18}",
        "example": "aut_o78uaoeuh78h6aoeif"
      },
      "newAuthorId": {
        "type": "string",
        "description": "The ID of authors after 2.3.0.",
        "format": "uuid",
        "example": "e4bb1afb-4a4f-4dd6-8be0-e615d233185b"
      },
      "authorId": {
        "type": "string",
        "anyOf": [
          {
            "$ref": "#/components/schemas/oldAuthorId"
          },
          {
            "$ref": "#/components/schemas/newAuthorId"
          }
        ]
      },
      "authorSeries": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/seriesId"
          },
          "name": {
            "$ref": "#/components/schemas/seriesName"
          },
          "items": {
            "description": "The items in the series. Each library item's media's metadata will have a `series` attribute, a `Series Sequence`, which is the matching series.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/libraryItemMinified"
            }
          }
        }
      },
      "author": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/authorId"
          },
          "asin": {
            "description": "The ASIN of the author. Will be null if unknown.",
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "description": "The name of the author.",
            "type": "string",
            "example": "Terry Goodkind"
          },
          "description": {
            "description": "A description of the author. Will be null if there is none.",
            "type": [
              "string",
              "null"
            ]
          },
          "imagePath": {
            "description": "The absolute path for the author image. Will be null if there is no image.",
            "type": [
              "string",
              "null"
            ]
          },
          "addedAt": {
            "$ref": "#/components/schemas/addedAt"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/updatedAt"
          }
        }
      },
      "authorWithItems": {
        "type": "object",
        "description": "The author schema with an array of items they are associated with.",
        "allOf": [
          {
            "$ref": "#/components/schemas/author"
          },
          {
            "type": "object",
            "properties": {
              "libraryItems": {
                "description": "The items associated with the author",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/libraryItemMinified"
                }
              }
            }
          }
        ]
      },
      "authorWithSeries": {
        "type": "object",
        "description": "The author schema with an array of items and series they are associated with.",
        "allOf": [
          {
            "$ref": "#/components/schemas/authorWithItems"
          },
          {
            "type": "object",
            "properties": {
              "series": {
                "description": "The series associated with the author",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/authorSeries"
                }
              }
            }
          }
        ]
      },
      "authorMinified": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/authorId"
          },
          "name": {
            "description": "The name of the author.",
            "type": "string",
            "example": "Terry Goodkind"
          }
        }
      },
      "authorExpanded": {
        "type": "object",
        "description": "The author schema with the total number of books in the library.",
        "allOf": [
          {
            "$ref": "#/components/schemas/author"
          },
          {
            "type": "object",
            "properties": {
              "numBooks": {
                "description": "The number of books associated with the author in the library.",
                "type": "integer",
                "example": 1
              }
            }
          }
        ]
      },
      "oldSeriesId": {
        "description": "The ID of series on server version 2.2.23 and before.",
        "type": "string",
        "format": "ser_[a-z0-9]{18}",
        "example": "ser_o78uaoeuh78h6aoeif"
      },
      "newSeriesId": {
        "type": "string",
        "description": "The ID of series after 2.3.0.",
        "format": "uuid",
        "example": "e4bb1afb-4a4f-4dd6-8be0-e615d233185b"
      },
      "seriesId": {
        "type": "string",
        "description": "The ID of the series.",
        "anyOf": [
          {
            "$ref": "#/components/schemas/oldSeriesId"
          },
          {
            "$ref": "#/components/schemas/newSeriesId"
          }
        ]
      },
      "seriesName": {
        "description": "The name of the series.",
        "type": "string",
        "example": "Sword of Truth"
      },
      "series": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/seriesId"
          },
          "name": {
            "$ref": "#/components/schemas/seriesName"
          },
          "description": {
            "description": "A description for the series. Will be null if there is none.",
            "type": [
              "string",
              "null"
            ]
          },
          "addedAt": {
            "$ref": "#/components/schemas/addedAt"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/updatedAt"
          }
        }
      },
      "seriesNumBooks": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/seriesId"
          },
          "name": {
            "$ref": "#/components/schemas/seriesName"
          },
          "nameIgnorePrefix": {
            "description": "The name of the series with any prefix moved to the end.",
            "type": "string",
            "example": "Sword of Truth"
          },
          "libraryItemIds": {
            "description": "The IDs of the library items in the series.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/libraryItemId"
            }
          },
          "numBooks": {
            "description": "The number of books in the series.",
            "type": "integer",
            "example": 1
          }
        }
      },
      "seriesBooks": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/seriesId"
          },
          "name": {
            "$ref": "#/components/schemas/seriesName"
          },
          "nameIgnorePrefix": {
            "description": "The name of the series with any prefix moved to the end.",
            "type": "string",
            "example": "Sword of Truth"
          },
          "nameIgnorePrefixSort": {
            "description": "The name of the series with any prefix removed.",
            "type": "string",
            "example": "Sword of Truth"
          },
          "type": {
            "description": "Will always be series.",
            "type": "string",
            "example": "series"
          },
          "books": {
            "description": "The library items that contain the books in the series. A sequence attribute that denotes the position in the series the book is in, is tacked on.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/libraryItem"
            }
          },
          "addedAt": {
            "$ref": "#/components/schemas/addedAt"
          },
          "totalDuration": {
            "description": "The combined duration (in seconds) of all books in the series.",
            "type": "number",
            "example": 12000.946
          }
        }
      },
      "seriesSequence": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/seriesId"
          },
          "name": {
            "$ref": "#/components/schemas/seriesName"
          },
          "sequence": {
            "description": "The position in the series the book is.",
            "type": "string",
            "example": "1"
          }
        }
      },
      "rssFeed": {
        "type": "object",
        "properties": {
          "id": {
            "description": "The ID of the RSS feed.",
            "type": "string",
            "example": "li_bufnnmp4y5o2gbbxfm"
          },
          "slug": {
            "description": "The slug (the last part of the URL) for the RSS feed.",
            "type": "string",
            "example": "li_bufnnmp4y5o2gbbxfm"
          },
          "userId": {
            "description": "The ID of the user that created the RSS feed.",
            "type": "string",
            "example": "root"
          },
          "entityType": {
            "description": "The type of entity the RSS feed is for.",
            "type": "string",
            "example": "item"
          },
          "entityId": {
            "description": "The ID of the entity the RSS feed is for.",
            "type": "string",
            "example": "li_bufnnmp4y5o2gbbxfm"
          },
          "coverPath": {
            "description": "The path of the cover to use for the RSS feed.",
            "type": "string",
            "example": "/metadata/items/li_bufnnmp4y5o2gbbxfm/cover.jpg"
          },
          "serverAddress": {
            "description": "The server's address.",
            "type": "string",
            "example": "https://abs.example.com",
            "format": "url"
          },
          "feedUrl": {
            "description": "The full URL of the RSS feed.",
            "type": "string",
            "example": "https://abs.example.com/feed/li_bufnnmp4y5o2gbbxfm",
            "format": "url"
          },
          "meta": {
            "$ref": "#/components/schemas/rssFeedMetadata"
          },
          "episodes": {
            "description": "The RSS feed's episodes.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/rssFeedEpisode"
            }
          },
          "createdAt": {
            "$ref": "#/components/schemas/createdAt"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/updatedAt"
          }
        }
      },
      "rssFeedMinified": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "id": {
            "description": "The ID of the RSS feed.",
            "type": "string",
            "example": "li_bufnnmp4y5o2gbbxfm"
          },
          "entityType": {
            "description": "The type of entity the RSS feed is for.",
            "type": "string",
            "example": "item"
          },
          "entityId": {
            "description": "The ID of the entity the RSS feed is for.",
            "type": "string",
            "example": "li_bufnnmp4y5o2gbbxfm"
          },
          "feedUrl": {
            "description": "The full URL of the RSS feed.",
            "type": "string",
            "example": "https://abs.example.com/feed/li_bufnnmp4y5o2gbbxfm",
            "format": "url"
          },
          "meta": {
            "$ref": "#/components/schemas/rssFeedMetadataMinified"
          }
        }
      },
      "rssFeedEpisode": {
        "type": "object",
        "properties": {
          "id": {
            "description": "The ID of the RSS feed episode.",
            "type": "string",
            "example": "ep_lh6ko39pumnrma3dhv"
          },
          "title": {
            "description": "The title of the RSS feed episode.",
            "type": "string",
            "example": "Pilot"
          },
          "description": {
            "description": "An HTML encoded description of the RSS feed episode.",
            "type": "string",
            "example": "<div><br>Pilot Episode. A new dog park opens in Night Vale. Carlos, a scientist, visits and discovers some interesting things. Seismic things. Plus, a helpful guide to surveillance helicopter-spotting.<br><br></div><div><br>Weather: \"These and More Than These\" by Joseph Fink<br><br></div><div><br>Music: Disparition, disparition.info<br><br></div><div><br>Logo: Rob Wilson, silastom.com<br><br></div><div><br>Produced by Night Vale Presents. Written by Joseph Fink and Jeffrey Cranor. Narrated by Cecil Baldwin. More Info: welcometonightvale.com, and follow @NightValeRadio on Twitter or Facebook.<br><br></div>"
          },
          "enclosure": {
            "description": "Download information for the RSS feed episode. (Similar to Podcast Episode Enclosure)",
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "example": "https://abs.example.com/feed/li_bufnnmp4y5o2gbbxfm/item/ep_lh6ko39pumnrma3dhv/1 - Pilot.mp3"
              },
              "type": {
                "type": "string",
                "example": "audio/mpeg"
              },
              "size": {
                "$ref": "#/components/schemas/size"
              }
            }
          },
          "pubDate": {
            "description": "The RSS feed episode's publication date.",
            "type": "string",
            "example": "Fri, 15 Jun 2012 12:00:00 -0000"
          },
          "link": {
            "description": "A URL to display to the RSS feed user.",
            "type": "string",
            "example": "https://abs.example.com/item/li_bufnnmp4y5o2gbbxfm",
            "format": "url"
          },
          "author": {
            "description": "The author of the RSS feed episode.",
            "type": "string",
            "example": "Night Vale Presents"
          },
          "explicit": {
            "description": "Whether the RSS feed episode is explicit.",
            "type": "boolean",
            "example": false
          },
          "duration": {
            "$ref": "#/components/schemas/durationSec"
          },
          "season": {
            "description": "The season of the RSS feed episode.",
            "type": [
              "string",
              "null"
            ]
          },
          "episode": {
            "description": "The episode number of the RSS feed episode.",
            "type": [
              "string",
              "null"
            ]
          },
          "episodeType": {
            "description": "The type of the RSS feed episode.",
            "type": [
              "string",
              "null"
            ]
          },
          "libraryItemId": {
            "description": "The ID of the library item the RSS feed is for.",
            "type": "string",
            "example": "li_bufnnmp4y5o2gbbxfm"
          },
          "episodeId": {
            "description": "The ID of the podcast episode the RSS feed episode is for. Will be null if the RSS feed is for a book.",
            "type": [
              "string",
              "null"
            ],
            "example": "ep_lh6ko39pumnrma3dhv"
          },
          "trackIndex": {
            "description": "The RSS feed episode's track index.",
            "type": "integer",
            "example": 0
          },
          "fullPath": {
            "description": "The path on the server of the audio file the RSS feed episode is for.",
            "type": "string",
            "example": "/podcasts/Welcome to Night Vale/1 - Pilot.mp3"
          }
        }
      },
      "rssFeedMetadata": {
        "type": "object",
        "properties": {
          "title": {
            "description": "The title of the entity the RSS feed is for.",
            "type": "string",
            "example": "Welcome to Night Vale"
          },
          "description": {
            "description": "The description of the entity the RSS feed is for.",
            "type": [
              "string",
              "null"
            ],
            "example": "\n        Twice-monthly community updates for the small desert town of Night Vale, where every conspiracy theory is true. Turn on your radio and hide. Never listened before? It's an ongoing radio show. Start with the current episode, and you'll catch on in no time. Or, go right to Episode 1 if you wanna binge-listen."
          },
          "author": {
            "description": "The author of the entity the RSS feed is for.",
            "type": [
              "string",
              "null"
            ],
            "example": "Night Vale Presents"
          },
          "imageUrl": {
            "description": "The URL of the RSS feed's image.",
            "type": "string",
            "example": "https://abs.example.com/feed/li_bufnnmp4y5o2gbbxfm/cover",
            "format": "url"
          },
          "feedUrl": {
            "description": "The URL of the RSS feed.",
            "type": "string",
            "example": "https://abs.example.com/feed/li_bufnnmp4y5o2gbbxfm",
            "format": "url"
          },
          "link": {
            "description": "The URL of the entity the RSS feed is for.",
            "type": "string",
            "example": "https://abs.example.com/item/li_bufnnmp4y5o2gbbxfm",
            "format": "url"
          },
          "explicit": {
            "description": "Whether the RSS feed's contents are explicit.",
            "type": "boolean",
            "example": false
          },
          "type": {
            "description": "The type of the RSS feed.",
            "type": [
              "string",
              "null"
            ],
            "example": "episodic"
          },
          "language": {
            "description": "The language of the RSS feed.",
            "type": [
              "string",
              "null"
            ],
            "example": "en"
          },
          "preventIndexing": {
            "description": "Whether the RSS feed is marked to prevent indexing of the feed.",
            "type": "boolean",
            "example": true
          },
          "ownerName": {
            "description": "The owner name of the RSS feed.",
            "type": [
              "string",
              "null"
            ]
          },
          "ownerEmail": {
            "description": "The owner email of the RSS feed.",
            "type": [
              "string",
              "null"
            ]
          }
        }
      },
      "rssFeedMetadataMinified": {
        "type": "object",
        "properties": {
          "title": {
            "description": "The title of the entity the RSS feed is for.",
            "type": "string",
            "example": "Welcome to Night Vale"
          },
          "description": {
            "description": "The description of the entity the RSS feed is for.",
            "type": [
              "string",
              "null"
            ],
            "example": "\n        Twice-monthly community updates for the small desert town of Night Vale, where every conspiracy theory is true. Turn on your radio and hide. Never listened before? It's an ongoing radio show. Start with the current episode, and you'll catch on in no time. Or, go right to Episode 1 if you wanna binge-listen."
          },
          "preventIndexing": {
            "description": "Whether the RSS feed is marked to prevent indexing of the feed.",
            "type": "boolean",
            "example": true
          },
          "ownerName": {
            "description": "The owner name of the RSS feed.",
            "type": [
              "string",
              "null"
            ]
          },
          "ownerEmail": {
            "description": "The owner email of the RSS feed.",
            "type": [
              "string",
              "null"
            ]
          }
        }
      },
      "audioFile": {
        "type": "object",
        "properties": {
          "index": {
            "description": "The index of the audio file.",
            "type": "integer",
            "example": 1
          },
          "ino": {
            "description": "The inode of the audio file.",
            "type": "string",
            "example": "649644248522215260"
          },
          "metadata": {
            "$ref": "#/components/schemas/fileMetadata"
          },
          "addedAt": {
            "$ref": "#/components/schemas/addedAt"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/updatedAt"
          },
          "trackNumFromMeta": {
            "description": "The track number of the audio file as pulled from the file's metadata. Will be null if unknown.",
            "type": [
              "integer",
              "null"
            ],
            "example": 1
          },
          "discNumFromMeta": {
            "description": "The disc number of the audio file as pulled from the file's metadata. Will be null if unknown.",
            "type": [
              "string",
              "null"
            ]
          },
          "trackNumFromFilename": {
            "description": "The track number of the audio file as determined from the file's name. Will be null if unknown.",
            "type": [
              "integer",
              "null"
            ],
            "example": 1
          },
          "discNumFromFilename": {
            "description": "The track number of the audio file as determined from the file's name. Will be null if unknown.",
            "type": [
              "string",
              "null"
            ]
          },
          "manuallyVerified": {
            "description": "Whether the audio file has been manually verified by a user.",
            "type": "boolean",
            "example": false
          },
          "invalid": {
            "description": "Whether the audio file is missing from the server.",
            "type": "boolean",
            "example": false
          },
          "exclude": {
            "description": "Whether the audio file has been marked for exclusion.",
            "type": "boolean",
            "example": false
          },
          "error": {
            "description": "Any error with the audio file. Will be null if there is none.",
            "type": [
              "string",
              "null"
            ]
          },
          "format": {
            "description": "The format of the audio file.",
            "type": "string",
            "example": "MP2/3 (MPEG audio layer 2/3)"
          },
          "duration": {
            "$ref": "#/components/schemas/durationSec"
          },
          "bitRate": {
            "description": "The bit rate (in bit/s) of the audio file.",
            "type": "integer",
            "example": 64000
          },
          "language": {
            "description": "The language of the audio file.",
            "type": [
              "string",
              "null"
            ]
          },
          "codec": {
            "description": "The codec of the audio file.",
            "type": "string",
            "example": "mp3"
          },
          "timeBase": {
            "description": "The time base of the audio file.",
            "type": "string",
            "example": "1/14112000"
          },
          "channels": {
            "description": "The number of channels the audio file has.",
            "type": "integer",
            "example": 2
          },
          "channelLayout": {
            "description": "The layout of the audio file's channels.",
            "type": "string",
            "example": "stereo"
          },
          "chapters": {
            "description": "If the audio file is part of an audiobook, the chapters the file contains.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/bookChapter"
            }
          },
          "embeddedCoverArt": {
            "description": "The type of embedded cover art in the audio file. Will be null if none exists.",
            "type": [
              "string",
              "null"
            ]
          },
          "metaTags": {
            "$ref": "#/components/schemas/audioMetaTags"
          },
          "mimeType": {
            "description": "The MIME type of the audio file.",
            "type": "string",
            "example": "audio/mpeg"
          }
        }
      },
      "audioTrack": {
        "type": "object",
        "properties": {
          "index": {
            "description": "The index of the audio track.",
            "type": "integer",
            "example": 1
          },
          "startOffset": {
            "description": "When in the audio file (in seconds) the track starts.",
            "type": "number",
            "example": 0
          },
          "duration": {
            "$ref": "#/components/schemas/durationSec"
          },
          "title": {
            "description": "The filename of the audio file the audio track belongs to.",
            "type": "string",
            "example": "Wizards First Rule 01.mp3"
          },
          "contentUrl": {
            "description": "The URL path of the audio file.",
            "type": "string",
            "example": "/s/item/li_8gch9ve09orgn4fdz8/Terry Goodkind - SOT Bk01 - Wizards First Rule 01.mp3"
          },
          "mimeType": {
            "description": "The MIME type of the audio file.",
            "type": "string",
            "example": "audio/mpeg"
          },
          "metadata": {
            "$ref": "#/components/schemas/fileMetadata"
          }
        }
      },
      "ebookFile": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "ino": {
            "description": "The inode of the ebook file.",
            "type": "string",
            "example": "9463162"
          },
          "metadata": {
            "$ref": "#/components/schemas/fileMetadata"
          },
          "ebookFormat": {
            "description": "The ebook format of the ebook file.",
            "type": "string",
            "example": "epub"
          },
          "addedAt": {
            "$ref": "#/components/schemas/addedAt"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/updatedAt"
          }
        }
      },
      "libraryFile": {
        "type": "object",
        "properties": {
          "ino": {
            "description": "The inode of the library file.",
            "type": "string",
            "example": "649644248522215260"
          },
          "metadata": {
            "$ref": "#/components/schemas/fileMetadata"
          },
          "addedAt": {
            "$ref": "#/components/schemas/addedAt"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/updatedAt"
          },
          "fileType": {
            "description": "The type of file that the library file is (audio, image, etc.).",
            "type": "string",
            "example": "audio"
          }
        }
      },
      "oldFolderId": {
        "type": "string",
        "description": "The ID of folders created on server version 2.2.23 and before.",
        "format": "fol_[a-z0-9]{18}",
        "example": "fol_o78uaoeuh78h6aoeif"
      },
      "newFolderId": {
        "type": "string",
        "description": "The folder ID for any folders added after 2.3.0.",
        "format": "uuid",
        "example": "e4bb1afb-4a4f-4dd6-8be0-e615d233185b"
      },
      "folderId": {
        "type": "string",
        "description": "Folder ID",
        "anyOf": [
          {
            "$ref": "#/components/schemas/oldFolderId"
          },
          {
            "$ref": "#/components/schemas/newFolderId"
          }
        ]
      },
      "folder": {
        "type": "object",
        "description": "Folder used in library",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/folderId"
          },
          "fullPath": {
            "description": "The path on the server for the folder. (Read Only)",
            "type": "string",
            "example": "/podcasts"
          },
          "libraryId": [
            {
              "$ref": "#/components/schemas/libraryId"
            }
          ],
          "addedAt": [
            {
              "$ref": "#/components/schemas/addedAt"
            }
          ]
        }
      },
      "oldLibraryId": {
        "type": "string",
        "description": "The ID of the libraries created on server version 2.2.23 and before.",
        "format": "lib_[a-z0-9]{18}",
        "example": "lib_o78uaoeuh78h6aoeif"
      },
      "newLibraryId": {
        "type": "string",
        "description": "The library ID for any libraries after 2.3.0.",
        "format": "uuid",
        "example": "e4bb1afb-4a4f-4dd6-8be0-e615d233185b"
      },
      "libraryId": {
        "type": "string",
        "anyOf": [
          {
            "$ref": "#/components/schemas/oldLibraryId"
          },
          {
            "$ref": "#/components/schemas/newLibraryId"
          }
        ]
      },
      "library": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/libraryId"
          },
          "name": {
            "type": "string",
            "description": "The name of the library.",
            "example": "Main"
          },
          "folders": {
            "type": "array",
            "description": "The folders that the library is composed of on the server.",
            "items": {
              "$ref": "#/components/schemas/folder"
            }
          },
          "displayOrder": {
            "type": "integer",
            "description": "Display position of the library in the list of libraries. Must be >= 1.",
            "example": 1,
            "minimum": 1
          },
          "icon": {
            "type": "string",
            "description": "The selected icon for the library. See [Library Icons](https://api.audiobookshelf.org/#library-icons) for a list of possible icons.",
            "example": "audiobookshelf"
          },
          "mediaType": [
            {
              "$ref": "#/components/schemas/mediaType"
            }
          ],
          "provider": {
            "type": "string",
            "description": "Preferred metadata provider for the library. See [Metadata Providers](https://api.audiobookshelf.org/#metadata-providers) for a list of possible providers.",
            "example": "audible"
          },
          "settings": {
            "$ref": "#/components/schemas/librarySettings"
          },
          "createdAt": {
            "$ref": "#/components/schemas/createdAt"
          },
          "lastUpdate": {
            "type": "integer",
            "description": "The time (in ms since POSIX epoch) when the library was last updated. (Read Only)",
            "example": 1646520916818
          }
        }
      },
      "libraryFilterData": {
        "type": "object",
        "properties": {
          "authors": {
            "description": "The authors of books in the library.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/authorMinified"
            }
          },
          "genres": {
            "description": "The genres of books in the library.",
            "type": "array",
            "items": {
              "type": "string",
              "example": "Fantasy"
            }
          },
          "tags": {
            "$ref": "#/components/schemas/tags"
          },
          "series": {
            "description": "The series in the library. The series will only have their id and name.",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "$ref": "#/components/schemas/seriesId"
                },
                "name": {
                  "$ref": "#/components/schemas/seriesName"
                }
              }
            }
          },
          "narrators": {
            "description": "The narrators of books in the library.",
            "type": "array",
            "items": {
              "type": "string",
              "example": "Sam Tsoutsouvas"
            }
          },
          "languages": {
            "description": "The languages of books in the library.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "oldLibraryItemId": {
        "description": "The ID of library items on server version 2.2.23 and before.",
        "type": "string",
        "format": "li_[a-z0-9]{18}",
        "example": "li_o78uaoeuh78h6aoeif"
      },
      "newLibraryItemId": {
        "type": "string",
        "description": "The ID of library items after 2.3.0.",
        "format": "uuid",
        "example": "e4bb1afb-4a4f-4dd6-8be0-e615d233185b"
      },
      "libraryItemId": {
        "type": "string",
        "anyOf": [
          {
            "$ref": "#/components/schemas/oldLibraryItemId"
          },
          {
            "$ref": "#/components/schemas/newLibraryItemId"
          }
        ]
      },
      "libraryItemBase": {
        "type": "object",
        "description": "Base library item schema",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/libraryItemId"
          },
          "ino": {
            "description": "The inode of the library item.",
            "type": "string",
            "format": "[0-9]*"
          },
          "libraryId": {
            "$ref": "#/components/schemas/libraryId"
          },
          "folderId": {
            "$ref": "#/components/schemas/folderId"
          },
          "path": {
            "description": "The path of the library item on the server.",
            "type": "string"
          },
          "relPath": {
            "description": "The path, relative to the library folder, of the library item.",
            "type": "string"
          },
          "isFile": {
            "description": "Whether the library item is a single file in the root of the library folder.",
            "type": "boolean"
          },
          "mtimeMs": {
            "description": "The time (in ms since POSIX epoch) when the library item was last modified on disk.",
            "type": "integer"
          },
          "ctimeMs": {
            "description": "The time (in ms since POSIX epoch) when the library item status was changed on disk.",
            "type": "integer"
          },
          "birthtimeMs": {
            "description": "The time (in ms since POSIX epoch) when the library item was created on disk. Will be 0 if unknown.",
            "type": "integer"
          },
          "addedAt": {
            "$ref": "#/components/schemas/addedAt"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/updatedAt"
          },
          "isMissing": {
            "description": "Whether the library item was scanned and no longer exists.",
            "type": "boolean"
          },
          "isInvalid": {
            "description": "Whether the library item was scanned and no longer has media files.",
            "type": "boolean"
          },
          "mediaType": {
            "$ref": "#/components/schemas/mediaType"
          }
        }
      },
      "libraryItem": {
        "type": "object",
        "description": "A single item on the server, like a book or podcast.",
        "allOf": [
          {
            "$ref": "#/components/schemas/libraryItemBase"
          },
          {
            "type": "object",
            "properties": {
              "folderId": {
                "$ref": "#/components/schemas/folderId"
              },
              "lastScan": {
                "description": "The time (in ms since POSIX epoch) when the library item was last scanned. Will be null if the server has not yet scanned the library item.",
                "type": "integer"
              },
              "scanVersion": {
                "description": "The version of the scanner when last scanned. Will be null if it has not been scanned.",
                "type": "string"
              },
              "media": {
                "$ref": "#/components/schemas/media"
              },
              "libraryFiles": {
                "description": "The files of the library item.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/libraryFile"
                }
              }
            }
          }
        ]
      },
      "libraryItemMinified": {
        "type": "object",
        "description": "A single item on the server, like a book or podcast. Minified media format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/libraryItemBase"
          },
          {
            "type": "object",
            "properties": {
              "media": {
                "$ref": "#/components/schemas/mediaMinified"
              }
            }
          }
        ]
      },
      "libraryItemExpanded": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/libraryItemBase"
          },
          {
            "type": "object",
            "properties": {
              "folderId": {
                "$ref": "#/components/schemas/folderId"
              },
              "lastScan": {
                "description": "The time (in ms since POSIX epoch) when the library item was last scanned. Will be null if the server has not yet scanned the library item.",
                "type": "integer"
              },
              "scanVersion": {
                "description": "The version of the scanner when last scanned. Will be null if it has not been scanned.",
                "type": "string"
              },
              "media": {
                "$ref": "#/components/schemas/mediaExpanded"
              },
              "libraryFiles": {
                "description": "The files of the library item.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/libraryFile"
                }
              },
              "size": {
                "$ref": "#/components/schemas/size"
              }
            }
          }
        ]
      },
      "bookBase": {
        "type": "object",
        "description": "Base book schema",
        "properties": {
          "libraryItemId": {
            "$ref": "#/components/schemas/libraryItemId"
          },
          "coverPath": {
            "description": "The absolute path on the server of the cover file. Will be null if there is no cover.",
            "type": [
              "string",
              "null"
            ],
            "example": "/audiobooks/Terry Goodkind/Sword of Truth/Wizards First Rule/cover.jpg"
          },
          "tags": {
            "$ref": "#/components/schemas/tags"
          },
          "audioFiles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/audioFile"
            }
          },
          "chapters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/bookChapter"
            }
          },
          "missingParts": {
            "description": "Any parts missing from the book by track index.",
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "ebookFile": {
            "$ref": "#/components/schemas/ebookFile"
          }
        }
      },
      "book": {
        "type": "object",
        "description": "Book schema, contains information about the book library item.",
        "allOf": [
          {
            "$ref": "#/components/schemas/bookBase"
          },
          {
            "type": "object",
            "properties": {
              "metadata": {
                "$ref": "#/components/schemas/bookMetadata"
              }
            }
          }
        ]
      },
      "bookMinified": {
        "type": "object",
        "description": "Minified book schema. Does not depend on `bookBase` because there's pretty much no overlap.",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/bookMetadataMinified"
          },
          "coverPath": {
            "description": "The absolute path on the server of the cover file. Will be null if there is no cover.",
            "type": [
              "string",
              "null"
            ],
            "example": "/audiobooks/Terry Goodkind/Sword of Truth/Wizards First Rule/cover.jpg"
          },
          "tags": {
            "$ref": "#/components/schemas/tags"
          },
          "numTracks": {
            "description": "The number of tracks the book's audio files have.",
            "type": "integer",
            "example": 1
          },
          "numAudioFiles": {
            "description": "The number of audio files the book has.",
            "type": "integer",
            "example": 1
          },
          "numChapters": {
            "description": "The number of chapters the book has.",
            "type": "integer",
            "example": 1
          },
          "numMissingParts": {
            "description": "The total number of missing parts the book has.",
            "type": "integer",
            "example": 0
          },
          "numInvalidAudioFiles": {
            "description": "The number of invalid audio files the book has.",
            "type": "integer",
            "example": 0
          },
          "duration": {
            "$ref": "#/components/schemas/durationSec"
          },
          "size": {
            "$ref": "#/components/schemas/size"
          },
          "ebookFormat": {
            "description": "The format of ebook of the book. Will be null if the book is an audiobook.",
            "type": [
              "string",
              "null"
            ]
          }
        }
      },
      "bookExpanded": {
        "type": "object",
        "description": "Expanded book object. Adds the duration and size of book, along with audio tracks for the book.",
        "allOf": [
          {
            "$ref": "#/components/schemas/bookBase"
          },
          {
            "type": "object",
            "properties": {
              "metadata": {
                "$ref": "#/components/schemas/bookMetadataExpanded"
              },
              "duration": {
                "$ref": "#/components/schemas/durationSec"
              },
              "size": {
                "$ref": "#/components/schemas/size"
              },
              "tracks": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/audioTrack"
                }
              }
            }
          }
        ]
      },
      "mediaType": {
        "type": "string",
        "description": "The type of media, will be book or podcast.",
        "enum": [
          "book",
          "podcast"
        ]
      },
      "media": {
        "description": "The media of the library item, contains the book or podcast object.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/book"
          },
          {
            "$ref": "#/components/schemas/podcast"
          }
        ]
      },
      "mediaMinified": {
        "description": "The minified media of the library item.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/bookMinified"
          },
          {
            "$ref": "#/components/schemas/podcastMinified"
          }
        ]
      },
      "mediaExpanded": {
        "description": "The expanded media of the library item.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/bookExpanded"
          },
          {
            "$ref": "#/components/schemas/podcastExpanded"
          }
        ]
      },
      "oldPodcastEpisodeId": {
        "description": "The ID of podcast episodes on server version 2.2.23 and before.",
        "type": "string",
        "format": "ep_[a-z0-9]{18}",
        "example": "ep_o78uaoeuh78h6aoeif"
      },
      "newPodcastEpisodeId": {
        "type": "string",
        "description": "The ID of podcast episodes after 2.3.0.",
        "format": "uuid",
        "example": "e4bb1afb-4a4f-4dd6-8be0-e615d233185b"
      },
      "podcastEpisodeId": {
        "type": "string",
        "anyOf": [
          {
            "$ref": "#/components/schemas/oldPodcastEpisodeId"
          },
          {
            "$ref": "#/components/schemas/newPodcastEpisodeId"
          }
        ]
      },
      "oldPodcastEpisodeDownloadId": {
        "description": "The ID of the podcast episode download on server version 2.2.23 and before.",
        "type": "string",
        "example": "epdl_pgv4d47j6dtqpk4r0v"
      },
      "newPodcastEpisodeDownloadId": {
        "type": "string",
        "description": "The ID of podcast episode downloads after 2.3.0.",
        "format": "uuid",
        "example": "e4bb1afb-4a4f-4dd6-8be0-e615d233185b"
      },
      "podcastEpisodeDownloadId": {
        "type": "string",
        "anyOf": [
          {
            "$ref": "#/components/schemas/oldPodcastEpisodeDownloadId"
          },
          {
            "$ref": "#/components/schemas/newPodcastEpisodeDownloadId"
          }
        ]
      },
      "podcastBase": {
        "type": "object",
        "description": "Base podcast schema",
        "properties": {
          "coverPath": {
            "description": "The absolute path on the server of the cover file. Will be null if there is no cover.",
            "type": [
              "string",
              "null"
            ],
            "example": "/podcasts/Welcome to Night Vale/cover.jpg"
          },
          "tags": {
            "$ref": "#/components/schemas/tags"
          },
          "autoDownloadEpisodes": {
            "description": "Whether the server will automatically download podcast episodes according to the schedule.",
            "type": "boolean",
            "example": true
          },
          "autoDownloadSchedule": {
            "description": "The cron expression for when to automatically download podcast episodes. Will not exist if autoDownloadEpisodes is false.",
            "type": "string",
            "example": "0 0 * * 1"
          },
          "lastEpisodeCheck": {
            "description": "The time (in ms since POSIX epoch) when the podcast was checked for new episodes.",
            "type": "integer",
            "example": 1667326662087
          },
          "maxEpisodesToKeep": {
            "description": "The maximum number of podcast episodes to keep when automatically downloading new episodes. Episodes beyond this limit will be deleted. If 0, all episodes will be kept.",
            "type": "integer",
            "example": 0
          },
          "maxNewEpisodesToDownload": {
            "description": "The maximum number of podcast episodes to download when automatically downloading new episodes. If 0, all episodes will be downloaded.",
            "type": "integer",
            "example": 3
          }
        }
      },
      "podcast": {
        "type": "object",
        "description": "A podcast on the server",
        "allOf": [
          {
            "$ref": "#/components/schemas/podcastBase"
          },
          {
            "type": "object",
            "properties": {
              "libraryItemId": {
                "$ref": "#/components/schemas/libraryItemId"
              },
              "metadata": {
                "$ref": "#/components/schemas/podcastMetadata"
              },
              "episodes": {
                "description": "The downloaded episodes of the podcast.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/podcastEpisode"
                }
              }
            }
          }
        ]
      },
      "podcastMinified": {
        "type": "object",
        "description": "A podcast on the server, minified schema",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/podcastMetadataMinified"
          },
          "coverPath": {
            "description": "The absolute path on the server of the cover file. Will be null if there is no cover.",
            "type": [
              "string",
              "null"
            ],
            "example": "/podcasts/Welcome to Night Vale/cover.jpg"
          },
          "tags": {
            "$ref": "#/components/schemas/tags"
          },
          "numEpisodes": {
            "description": "The number of downloaded episodes for the podcast.",
            "type": "integer",
            "example": 1
          },
          "autoDownloadEpisodes": {
            "description": "Whether the server will automatically download podcast episodes according to the schedule.",
            "type": "boolean",
            "example": true
          },
          "autoDownloadSchedule": {
            "description": "The cron expression for when to automatically download podcast episodes. Will not exist if autoDownloadEpisodes is false.",
            "type": "string",
            "example": "0 0 * * 1"
          },
          "lastEpisodeCheck": {
            "description": "The time (in ms since POSIX epoch) when the podcast was checked for new episodes.",
            "type": "integer",
            "example": 1667326662087
          },
          "maxEpisodesToKeep": {
            "description": "The maximum number of podcast episodes to keep when automatically downloading new episodes. Episodes beyond this limit will be deleted. If 0, all episodes will be kept.",
            "type": "integer",
            "example": 0
          },
          "maxNewEpisodesToDownload": {
            "description": "The maximum number of podcast episodes to download when automatically downloading new episodes. If 0, all episodes will be downloaded.",
            "type": "integer",
            "example": 3
          },
          "size": {
            "$ref": "#/components/schemas/size"
          }
        }
      },
      "podcastExpanded": {
        "type": "object",
        "description": "A podcast on the server, expanded schema",
        "properties": {
          "libraryItemId": {
            "$ref": "#/components/schemas/libraryItemId"
          },
          "metadata": {
            "$ref": "#/components/schemas/podcastMetadataExpanded"
          },
          "coverPath": {
            "description": "The absolute path on the server of the cover file. Will be null if there is no cover.",
            "type": [
              "string",
              "null"
            ],
            "example": "/podcasts/Welcome to Night Vale/cover.jpg"
          },
          "tags": {
            "$ref": "#/components/schemas/tags"
          },
          "episodes": {
            "description": "The downloaded episodes of the podcast.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/podcastEpisodeExpanded"
            }
          },
          "autoDownloadEpisodes": {
            "description": "Whether the server will automatically download podcast episodes according to the schedule.",
            "type": "boolean",
            "example": true
          },
          "autoDownloadSchedule": {
            "description": "The cron expression for when to automatically download podcast episodes. Will not exist if autoDownloadEpisodes is false.",
            "type": "string",
            "example": "0 0 * * 1"
          },
          "lastEpisodeCheck": {
            "description": "The time (in ms since POSIX epoch) when the podcast was checked for new episodes.",
            "type": "integer",
            "example": 1667326662087
          },
          "maxEpisodesToKeep": {
            "description": "The maximum number of podcast episodes to keep when automatically downloading new episodes. Episodes beyond this limit will be deleted. If 0, all episodes will be kept.",
            "type": "integer",
            "example": 0
          },
          "maxNewEpisodesToDownload": {
            "description": "The maximum number of podcast episodes to download when automatically downloading new episodes. If 0, all episodes will be downloaded.",
            "type": "integer",
            "example": 3
          },
          "size": {
            "$ref": "#/components/schemas/size"
          }
        }
      },
      "podcastMetadataBase": {
        "type": "object",
        "properties": {
          "title": {
            "description": "The title of the podcast. Will be null if unknown.",
            "type": [
              "string",
              "null"
            ],
            "example": "Welcome to Night Vale"
          },
          "author": {
            "description": "The author of the podcast. Will be null if unknown.",
            "type": [
              "string",
              "null"
            ],
            "example": "Night Vale Presents"
          },
          "description": {
            "description": "The description for the podcast. Will be null if unknown.",
            "type": [
              "string",
              "null"
            ],
            "example": "\n        Twice-monthly community updates for the small desert town of Night Vale, where every conspiracy theory is true. Turn on your radio and hide. Never listened before? It's an ongoing radio show. Start with the current episode, and you'll catch on in no time. Or, go right to Episode 1 if you wanna binge-listen."
          },
          "releaseDate": {
            "description": "The release date of the podcast. Will be null if unknown.",
            "type": [
              "string",
              "null"
            ],
            "example": "2022-10-20T19:00:00Z",
            "format": "date-time"
          },
          "genres": {
            "description": "The podcast's genres.",
            "type": "array",
            "items": {
              "type": "string",
              "example": "Science Fiction - Podcasts - Fiction"
            }
          },
          "feedUrl": {
            "description": "A URL of an RSS feed for the podcast. Will be null if unknown.",
            "type": [
              "string",
              "null"
            ],
            "example": "http://feeds.nightvalepresents.com/welcometonightvalepodcast",
            "format": "url"
          },
          "imageUrl": {
            "description": "A URL of a cover image for the podcast. Will be null if unknown.",
            "type": [
              "string",
              "null"
            ],
            "example": "https://is4-ssl.mzstatic.com/image/thumb/Podcasts125/v4/4a/31/35/4a3135d0-1fe7-a2d7-fb43-d182ec175402/mza_8232698753950666850.jpg/600x600bb.jpg",
            "format": "url"
          },
          "itunesPageUrl": {
            "description": "A URL of an iTunes page for the podcast. Will be null if unknown.",
            "type": [
              "string",
              "null"
            ],
            "example": "https://podcasts.apple.com/us/podcast/welcome-to-night-vale/id536258179?uo=4",
            "format": "url"
          },
          "itunesId": {
            "description": "The iTunes ID for the podcast. Will be null if unknown.",
            "type": [
              "integer",
              "null"
            ],
            "example": 536258179
          },
          "itunesArtistId": {
            "description": "The iTunes Artist ID for the author of the podcast. Will be null if unknown.",
            "type": [
              "integer",
              "null"
            ],
            "example": 718704794
          },
          "explicit": {
            "description": "Whether the podcast has been marked as explicit.",
            "type": "boolean",
            "example": false
          },
          "language": {
            "description": "The language of the podcast. Will be null if unknown.",
            "type": [
              "string",
              "null"
            ]
          },
          "type": {
            "description": "The type of the podcast.",
            "type": [
              "string",
              "null"
            ],
            "example": "episodic"
          }
        }
      },
      "podcastMetadata": {
        "type": "object",
        "description": "The metadata for a podcast item.",
        "allOf": [
          {
            "$ref": "#/components/schemas/podcastMetadataBase"
          }
        ]
      },
      "podcastMetadataMinified": {
        "type": "object",
        "description": "The minified metadata for a podcast item.",
        "allOf": [
          {
            "$ref": "#/components/schemas/podcastMetadataBase"
          },
          {
            "type": "object",
            "properties": {
              "titleIgnorePrefix": {
                "description": "The title of the podcast with any prefix moved to the end.",
                "type": "string",
                "example": "Welcome to Night Vale"
              }
            }
          }
        ]
      },
      "podcastMetadataExpanded": {
        "type": "object",
        "description": "The expanded metadata for a podcast item.",
        "allOf": [
          {
            "$ref": "#/components/schemas/podcastMetadataBase"
          },
          {
            "type": "object",
            "properties": {
              "titleIgnorePrefix": {
                "description": "The title of the podcast with any prefix moved to the end.",
                "type": "string",
                "example": "Welcome to Night Vale"
              }
            }
          }
        ]
      },
      "podcastFeed": {
        "type": "object",
        "description": "The podcast feed, includes the metadata and list of episodes.",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/podcastMetadata"
          },
          "episodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/podcastEpisode"
            }
          }
        }
      },
      "podcastFeedMinified": {
        "type": "object",
        "description": "The podcast feed, includes the metadata and episode count.",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/podcastMetadata"
          },
          "numEpisodes": {
            "description": "The number of episodes the podcast has.",
            "type": "integer",
            "example": 280
          }
        }
      },
      "podcastFeedMetadata": {
        "type": "object",
        "properties": {
          "image": {
            "description": "A URL for the podcast's cover image.",
            "type": "string",
            "example": "https://f.prxu.org/126/images/1f749c5d-c83a-4db9-8112-a3245da49c54/nightvalelogo-web4.jpg",
            "format": "url"
          },
          "categories": {
            "description": "The podcast's categories. Can be similar to genres.",
            "type": "array",
            "items": {
              "type": "string",
              "example": "Fiction:Science Fiction"
            }
          },
          "feedUrl": {
            "description": "A URL of an RSS feed for the podcast.",
            "type": "string",
            "example": "http://feeds.nightvalepresents.com/welcometonightvalepodcast",
            "format": "url"
          },
          "description": {
            "description": "A HTML encoded description of the podcast.",
            "type": "string",
            "example": "\n        <p>Twice-monthly community updates for the small desert town of Night Vale, where every conspiracy theory is true. Turn on your radio and hide. Never listened before? It's an ongoing radio show. Start with the current episode, and you'll catch on in no time. Or, go right to Episode 1 if you wanna binge-listen.</p>"
          },
          "descriptionPlain": {
            "description": "A plain text description of the podcast.",
            "type": "string",
            "example": "\n        Twice-monthly community updates for the small desert town of Night Vale, where every conspiracy theory is true. Turn on your radio and hide. Never listened before? It's an ongoing radio show. Start with the current episode, and you'll catch on in no time. Or, go right to Episode 1 if you wanna binge-listen."
          },
          "title": {
            "description": "The podcast's title.",
            "type": "string",
            "example": "Welcome to Night Vale"
          },
          "language": {
            "description": "The podcast's language.",
            "type": "string",
            "example": "en"
          },
          "explicit": {
            "description": "Whether the podcast is explicit. Will probably be \"true\" or \"false\".",
            "type": "string",
            "example": "false"
          },
          "author": {
            "description": "The podcast's author.",
            "type": "string",
            "example": "Night Vale Presents"
          },
          "pubDate": {
            "description": "The podcast's publication date.",
            "type": "string",
            "example": "Thu, 17 Nov 2022 16:04:42 -0000"
          },
          "link": {
            "description": "A URL the RSS feed provided for possible display to the user.",
            "type": "string",
            "example": "http://welcometonightvale.com",
            "format": "url"
          }
        }
      },
      "podcastEpisodeBase": {
        "type": "object",
        "description": "The base schema for a podcast episode.",
        "properties": {
          "title": {
            "description": "The podcast episode's title.",
            "type": "string",
            "example": "Pilot"
          },
          "subtitle": {
            "description": "The podcast episode's subtitle.",
            "type": "string",
            "example": "Pilot Episode. A new dog park opens in Night Vale. Carlos, a scientist, visits and discovers some interesting things. Seismic things. Plus, a helpful guide to surveillance helicopter-spotting. Weather: \"These and More Than These\" by Joseph Fink Music:..."
          },
          "description": {
            "description": "A HTML encoded description of the podcast episode.",
            "type": "string",
            "example": "\n          <p>Pilot Episode. A new dog park opens in Night Vale. Carlos, a scientist, visits and discovers some interesting things. Seismic things. Plus, a helpful guide to surveillance helicopter-spotting.</p>\n\n  <p>Weather: \"These and More Than These\" by Joseph Fink</p>\n\n\n  <p>Music: Disparition, <a target=\"_blank\">disparition.info</a></p>\n\n\n  <p>Logo: Rob Wilson, <a target=\"_blank\">silastom.com</a></p>\n\n\n  <p>Produced by Night Vale Presents. Written by Joseph Fink and Jeffrey\n  Cranor. Narrated by Cecil Baldwin. More Info: <a\n  target=\"_blank\">welcometonightvale.com</a>, and follow <a\n  target=\"_blank\">@NightValeRadio</a> on Twitter or <a\n  target=\"_blank\">Facebook</a>.</p>"
          },
          "episodeType": {
            "description": "The type of episode that the podcast episode is.",
            "type": "string",
            "example": "full"
          },
          "season": {
            "description": "The season of the podcast episode.",
            "type": "string",
            "example": ""
          },
          "episode": {
            "description": "The episode of the season of the podcast.",
            "type": "string",
            "example": ""
          },
          "publishedAt": {
            "description": "The time (in ms since POSIX epoch) when the podcast episode was published.",
            "type": "integer",
            "example": 1339761600000
          },
          "enclosure": {
            "$ref": "#/components/schemas/podcastEpisodeEnclousure"
          }
        }
      },
      "podcastFeedEpisode": {
        "type": "object",
        "description": "Episode from podcast feed.",
        "allOf": [
          {
            "$ref": "#/components/schemas/podcastEpisodeBase"
          },
          {
            "type": "object",
            "properties": {
              "descriptionPlain": {
                "description": "A plain text description of the podcast episode.",
                "type": "string",
                "example": "\n          Pilot Episode. A new dog park opens in Night Vale. Carlos, a scientist, visits and discovers some interesting things. Seismic things. Plus, a helpful guide to surveillance helicopter-spotting.\n\n  Weather: \"These and More Than These\" by Joseph Fink\n\n\n  Music: Disparition, disparition.info\n\n\n  Logo: Rob Wilson, silastom.com\n\n\n  Produced by Night Vale Presents. Written by Joseph Fink and Jeffrey\n  Cranor. Narrated by Cecil Baldwin. More Info: welcometonightvale.com,\n  and follow @NightValeRadio on Twitter or Facebook."
              },
              "author": {
                "description": "The author of the podcast episode.",
                "type": "string",
                "example": ""
              },
              "duration": {
                "description": "The duration of the podcast episode as reported by the RSS feed.",
                "type": "string",
                "example": "21:02"
              },
              "explicit": {
                "description": "Whether the podcast episode is explicit.",
                "type": "string",
                "example": ""
              }
            }
          }
        ]
      },
      "podcastEpisode": {
        "type": [
          "object",
          "null"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/podcastEpisodeBase"
          },
          {
            "type": "object",
            "properties": {
              "libraryItemId": {
                "$ref": "#/components/schemas/libraryItemId"
              },
              "id": {
                "$ref": "#/components/schemas/podcastEpisodeId"
              },
              "index": {
                "description": "The index of the podcast episode.",
                "type": "integer",
                "example": 1
              },
              "enclosure": {
                "$ref": "#/components/schemas/podcastEpisodeEnclousure"
              },
              "pubDate": {
                "description": "When the podcast episode was published.",
                "type": "string",
                "example": "Fri, 15 Jun 2012 12:00:00 -0000"
              },
              "audioFile": {
                "$ref": "#/components/schemas/audioFile"
              },
              "addedAt": {
                "$ref": "#/components/schemas/addedAt"
              },
              "updatedAt": {
                "$ref": "#/components/schemas/updatedAt"
              }
            }
          }
        ]
      },
      "podcastEpisodeExpanded": {
        "type": [
          "object",
          "null"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/podcastEpisodeBase"
          },
          {
            "type": "object",
            "properties": {
              "audioTrack": {
                "$ref": "#/components/schemas/audioTrack"
              },
              "duration": {
                "$ref": "#/components/schemas/durationSec"
              },
              "size": {
                "$ref": "#/components/schemas/size"
              }
            }
          }
        ]
      },
      "podcastEpisodeEnclousure": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "url": {
            "description": "The URL where the podcast episode's audio file was downloaded from.",
            "type": "string",
            "example": "https://www.podtrac.com/pts/redirect.mp3/dovetail.prxu.org/_/126/1fadf1ad-aad8-449f-843b-6e8bb6949622/1_Pilot.mp3",
            "format": "url"
          },
          "type": {
            "description": "The MIME type of the podcast episode's audio file.",
            "type": "string",
            "example": "audio/mpeg"
          },
          "length": {
            "description": "The size (in bytes) that was reported when downloading the podcast episode's audio file.",
            "type": "string",
            "example": "20588611"
          }
        }
      },
      "podcastEpisodeDownload": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/podcastEpisodeDownloadId"
          },
          "episodeDisplayTitle": {
            "description": "The display title of the episode to be downloaded.",
            "type": "string",
            "example": "Glow Cloud"
          },
          "url": {
            "description": "The URL from which to download the episode.",
            "type": "string",
            "example": "https://www.podtrac.com/pts/redirect.mp3/dovetail.prxu.org/_/126/cb1dd91f-5d8d-42e9-ba22-14ff335d2cbb/2_Glow_Cloud.mp3",
            "format": "url"
          },
          "libraryItemId": {
            "$ref": "#/components/schemas/libraryItemId"
          },
          "libraryId": {
            "$ref": "#/components/schemas/libraryId"
          },
          "isFinished": {
            "description": "Whether the episode has finished downloading.",
            "type": "boolean",
            "example": false
          },
          "failed": {
            "description": "Whether the episode failed to download.",
            "type": "boolean",
            "example": false
          },
          "startedAt": {
            "description": "The time (in ms since POSIX epoch) when the episode started downloading. Will be null if it has not started downloading yet.",
            "type": [
              "string",
              "null"
            ]
          },
          "createdAt": {
            "$ref": "#/components/schemas/createdAt"
          },
          "finishedAt": {
            "description": "The time (in ms since POSIX epoch) when the episode finished downloading. Will be null if it has not finished.",
            "type": [
              "string",
              "null"
            ]
          },
          "podcastTitle": {
            "description": "The title of the episode's podcast.",
            "type": [
              "string",
              "null"
            ],
            "example": "Welcome to Night Vale"
          },
          "podcastExplicit": {
            "description": "Whether the episode's podcast is explicit.",
            "type": "boolean",
            "example": false
          },
          "season": {
            "description": "The season of the podcast episode.",
            "type": [
              "string",
              "null"
            ],
            "example": ""
          },
          "episode": {
            "description": "The episode number of the podcast episode.",
            "type": [
              "string",
              "null"
            ],
            "example": ""
          },
          "episodeType": {
            "description": "The type of the podcast episode.",
            "type": "string",
            "example": "full"
          },
          "publishedAt": {
            "description": "The time (in ms since POSIX epoch) when the episode was published.",
            "type": [
              "integer",
              "null"
            ],
            "example": 1341144000000
          }
        }
      },
      "audioMetaTags": {
        "description": "ID3 metadata tags pulled from the audio file on import. Only non-null tags will be returned in requests.",
        "type": "object",
        "properties": {
          "tagAlbum": {
            "type": [
              "string",
              "null"
            ],
            "example": "SOT Bk01"
          },
          "tagArtist": {
            "type": [
              "string",
              "null"
            ],
            "example": "Terry Goodkind"
          },
          "tagGenre": {
            "type": [
              "string",
              "null"
            ],
            "example": "Audiobook Fantasy"
          },
          "tagTitle": {
            "type": [
              "string",
              "null"
            ],
            "example": "Wizards First Rule 01"
          },
          "tagSeries": {
            "type": [
              "string",
              "null"
            ]
          },
          "tagSeriesPart": {
            "type": [
              "string",
              "null"
            ]
          },
          "tagTrack": {
            "type": [
              "string",
              "null"
            ],
            "example": "01/20"
          },
          "tagDisc": {
            "type": [
              "string",
              "null"
            ]
          },
          "tagSubtitle": {
            "type": [
              "string",
              "null"
            ]
          },
          "tagAlbumArtist": {
            "type": [
              "string",
              "null"
            ],
            "example": "Terry Goodkind"
          },
          "tagDate": {
            "type": [
              "string",
              "null"
            ]
          },
          "tagComposer": {
            "type": [
              "string",
              "null"
            ],
            "example": "Terry Goodkind"
          },
          "tagPublisher": {
            "type": [
              "string",
              "null"
            ]
          },
          "tagComment": {
            "type": [
              "string",
              "null"
            ]
          },
          "tagDescription": {
            "type": [
              "string",
              "null"
            ]
          },
          "tagEncoder": {
            "type": [
              "string",
              "null"
            ]
          },
          "tagEncodedBy": {
            "type": [
              "string",
              "null"
            ]
          },
          "tagIsbn": {
            "type": [
              "string",
              "null"
            ]
          },
          "tagLanguage": {
            "type": [
              "string",
              "null"
            ]
          },
          "tagASIN": {
            "type": [
              "string",
              "null"
            ]
          },
          "tagOverdriveMediaMarker": {
            "type": [
              "string",
              "null"
            ]
          },
          "tagOriginalYear": {
            "type": [
              "string",
              "null"
            ]
          },
          "tagReleaseCountry": {
            "type": [
              "string",
              "null"
            ]
          },
          "tagReleaseType": {
            "type": [
              "string",
              "null"
            ]
          },
          "tagReleaseStatus": {
            "type": [
              "string",
              "null"
            ]
          },
          "tagISRC": {
            "type": [
              "string",
              "null"
            ]
          },
          "tagMusicBrainzTrackId": {
            "type": [
              "string",
              "null"
            ]
          },
          "tagMusicBrainzAlbumId": {
            "type": [
              "string",
              "null"
            ]
          },
          "tagMusicBrainzAlbumArtistId": {
            "type": [
              "string",
              "null"
            ]
          },
          "tagMusicBrainzArtistId": {
            "type": [
              "string",
              "null"
            ]
          }
        }
      },
      "narrators": {
        "description": "The narrators of the audiobook.",
        "type": "array",
        "items": {
          "type": "string",
          "example": "Sam Tsoutsouvas"
        }
      },
      "bookMetadataBase": {
        "type": "object",
        "properties": {
          "title": {
            "description": "The title of the book. Will be null if unknown.",
            "type": [
              "string",
              "null"
            ],
            "example": "Wizards First Rule"
          },
          "subtitle": {
            "description": "The subtitle of the book. Will be null if there is no subtitle.",
            "type": [
              "string",
              "null"
            ]
          },
          "genres": {
            "description": "The genres of the book.",
            "type": "array",
            "items": {
              "type": "string",
              "example": "Fantasy"
            }
          },
          "publishedYear": {
            "description": "The year the book was published. Will be null if unknown.",
            "type": [
              "string",
              "null"
            ],
            "example": "2008"
          },
          "publishedDate": {
            "description": "The date the book was published. Will be null if unknown.",
            "type": [
              "string",
              "null"
            ]
          },
          "publisher": {
            "description": "The publisher of the book. Will be null if unknown.",
            "type": [
              "string",
              "null"
            ],
            "example": "Brilliance Audio"
          },
          "description": {
            "description": "A description for the book. Will be null if empty.",
            "type": [
              "string",
              "null"
            ],
            "example": "The masterpiece that started Terry Goodkind's New York Times bestselling epic Sword of Truth In the aftermath of the brutal murder of his father, a mysterious woman, Kahlan Amnell, appears in Richard Cypher's forest sanctuary seeking help...and more. His world, his very beliefs, are shattered when ancient debts come due with thundering violence. In a dark age it takes courage to live, and more than mere courage to challenge those who hold dominion, Richard and Kahlan must take up that challenge or become the next victims. Beyond awaits a bewitching land where even the best of their hearts could betray them. Yet, Richard fears nothing so much as what secrets his sword might reveal about his own soul. Falling in love would destroy them - for reasons Richard can't imagine and Kahlan dare not say. In their darkest hour, hunted relentlessly, tormented by treachery and loss, Kahlan calls upon Richard to reach beyond his sword - to invoke within himself something more noble. Neither knows that the rules of battle have just changed...or that their time has run out. Wizard's First Rule is the beginning. One book. One Rule. Witness the birth of a legend."
          },
          "isbn": {
            "description": "The ISBN of the book. Will be null if unknown.",
            "type": [
              "string",
              "null"
            ]
          },
          "asin": {
            "description": "The ASIN of the book. Will be null if unknown.",
            "type": [
              "string",
              "null"
            ],
            "example": "B002V0QK4C"
          },
          "language": {
            "description": "The language of the book. Will be null if unknown.",
            "type": [
              "string",
              "null"
            ]
          },
          "explicit": {
            "description": "Whether the book has been marked as explicit.",
            "type": "boolean",
            "example": false
          }
        }
      },
      "bookMetadata": {
        "type": "object",
        "description": "The metadata for a book in the database.",
        "allOf": [
          {
            "$ref": "#/components/schemas/bookMetadataBase"
          },
          {
            "type": "object",
            "properties": {
              "authors": {
                "description": "The authors of the book.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/authorMinified"
                }
              },
              "narrators": {
                "$ref": "#/components/schemas/narrators"
              },
              "series": {
                "description": "The series the book belongs to.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/seriesSequence"
                }
              }
            }
          }
        ]
      },
      "bookMetadataMinified": {
        "type": "object",
        "description": "The minified metadata for a book in the database.",
        "allOf": [
          {
            "$ref": "#/components/schemas/bookMetadataBase"
          },
          {
            "type": "object",
            "properties": {
              "titleIgnorePrefix": {
                "description": "The title of the book with any prefix moved to the end.",
                "type": "string"
              },
              "authorName": {
                "description": "The name of the book's author(s).",
                "type": "string",
                "example": "Terry Goodkind"
              },
              "authorNameLF": {
                "description": "The name of the book's author(s) with last names first.",
                "type": "string",
                "example": "Goodkind, Terry"
              },
              "narratorName": {
                "description": "The name of the audiobook's narrator(s).",
                "type": "string",
                "example": "Sam Tsoutsouvas"
              },
              "seriesName": {
                "description": "The name of the book's series.",
                "type": "string",
                "example": "Sword of Truth"
              }
            }
          }
        ]
      },
      "bookMetadataExpanded": {
        "type": "object",
        "description": "The expanded metadata for a book in the database.",
        "allOf": [
          {
            "$ref": "#/components/schemas/bookMetadataBase"
          },
          {
            "type": "object",
            "properties": {
              "titleIgnorePrefix": {
                "description": "The title of the book with any prefix moved to the end.",
                "type": "string"
              },
              "authorName": {
                "description": "The name of the book's author(s).",
                "type": "string",
                "example": "Terry Goodkind"
              },
              "authorNameLF": {
                "description": "The name of the book's author(s) with last names first.",
                "type": "string",
                "example": "Goodkind, Terry"
              },
              "narratorName": {
                "description": "The name of the audiobook's narrator(s).",
                "type": "string",
                "example": "Sam Tsoutsouvas"
              },
              "seriesName": {
                "description": "The name of the book's series.",
                "type": "string",
                "example": "Sword of Truth"
              },
              "authors": {
                "description": "The authors of the book.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/authorMinified"
                }
              },
              "narrators": {
                "$ref": "#/components/schemas/narrators"
              },
              "series": {
                "description": "The series the book belongs to.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/seriesSequence"
                }
              }
            }
          }
        ]
      },
      "bookChapter": {
        "type": "object",
        "properties": {
          "id": {
            "description": "The ID of the book chapter.",
            "type": "integer",
            "example": 0
          },
          "start": {
            "description": "When in the book (in seconds) the chapter starts.",
            "type": "integer",
            "example": 0
          },
          "end": {
            "description": "When in the book (in seconds) the chapter ends.",
            "type": "number",
            "example": 6004.6675
          },
          "title": {
            "description": "The title of the chapter.",
            "type": "string",
            "example": "Wizards First Rule 01 Chapter 1"
          }
        }
      },
      "fileMetadata": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "filename": {
            "description": "The filename of the file.",
            "type": "string",
            "example": "Wizards First Rule 01.mp3"
          },
          "ext": {
            "description": "The file extension of the file.",
            "type": "string",
            "example": ".mp3"
          },
          "path": {
            "description": "The absolute path on the server of the file.",
            "type": "string",
            "example": "/audiobooks/Terry Goodkind/Sword of Truth/Wizards First Rule/Terry Goodkind - SOT Bk01 - Wizards First Rule 01.mp3"
          },
          "relPath": {
            "description": "The path of the file, relative to the book's or podcast's folder.",
            "type": "string",
            "example": "Wizards First Rule 01.mp3"
          },
          "size": {
            "$ref": "#/components/schemas/size"
          },
          "mtimeMs": {
            "description": "The time (in ms since POSIX epoch) when the file was last modified on disk.",
            "type": "integer",
            "example": 1632223180278
          },
          "ctimeMs": {
            "description": "The time (in ms since POSIX epoch) when the file status was changed on disk.",
            "type": "integer",
            "example": 1645978261001
          },
          "birthtimeMs": {
            "description": "The time (in ms since POSIX epoch) when the file was created on disk. Will be 0 if unknown.",
            "type": "integer",
            "example": 0
          }
        }
      },
      "notification": {
        "type": "object",
        "properties": {
          "id": {
            "description": "The ID of the notification.",
            "type": "string",
            "example": "noti_nod281qwkj5ow7h7fi"
          },
          "libraryId": {
            "description": "The ID of the library the notification is associated with.",
            "type": [
              "string",
              "null"
            ]
          },
          "eventName": {
            "description": "The name of the event the notification will fire on.",
            "type": "string",
            "example": "onPodcastEpisodeDownloaded"
          },
          "urls": {
            "description": "The Apprise URLs to use for the notification.",
            "type": "array",
            "items": {
              "type": "string",
              "example": "apprises://apprise.example.com/email"
            }
          },
          "titleTemplate": {
            "description": "The template for the notification title.",
            "type": "string",
            "example": "New {{podcastTitle}} Episode!"
          },
          "bodyTemplate": {
            "description": "The template for the notification body.",
            "type": "string",
            "example": "{{episodeTitle}} has been added to {{libraryName}} library."
          },
          "enabled": {
            "description": "Whether the notification is enabled.",
            "type": "boolean",
            "example": true
          },
          "type": {
            "description": "The notification's type.",
            "type": "string",
            "example": "info"
          },
          "lastFiredAt": {
            "description": "The time (in ms since POSIX epoch) when the notification was last fired. Will be null if the notification has not fired.",
            "type": [
              "integer",
              "null"
            ],
            "example": 1668776410792
          },
          "lastAttemptFailed": {
            "description": "Whether the last notification attempt failed.",
            "type": "boolean",
            "example": false
          },
          "numConsecutiveFailedAttempts": {
            "description": "The number of consecutive times the notification has failed.",
            "type": "integer",
            "example": 0
          },
          "numTimesFired": {
            "description": "The number of times the notification has fired.",
            "type": "integer",
            "example": 5
          },
          "createdAt": {
            "$ref": "#/components/schemas/createdAt"
          }
        }
      },
      "notificationEvents": {
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of the notification event.",
            "type": "string",
            "example": "onPodcastEpisodeDownloaded"
          },
          "requiresLibrary": {
            "description": "Whether the notification event depends on a library existing.",
            "type": "boolean",
            "example": true
          },
          "libraryMediaType": {
            "description": "The type of media of the library the notification depends on existing. Will not exist if requiresLibrary is false.",
            "type": [
              "string",
              "null"
            ],
            "example": "podcast"
          },
          "description": {
            "description": "The description of the notification event.",
            "type": "string",
            "example": "Triggered when a podcast episode is auto-downloaded"
          },
          "variables": {
            "description": "The variables of the notification event that can be used in the notification templates.",
            "type": "array",
            "items": {
              "type": "string",
              "example": "libraryItemId - libraryId - libraryName - mediaTags - podcastTitle - podcastAuthor - podcastDescription - podcastGenres - episodeId - episodeTitle - episodeSubtitle - episodeDescription"
            }
          },
          "defaults": {
            "type": "object",
            "properties": {
              "title": {
                "description": "The default title template for notifications using the notification event.",
                "type": "string",
                "example": "New {{podcastTitle}} Episode!"
              },
              "body": {
                "description": "The default body template for notifications using the notification event.",
                "type": "string",
                "example": "{{episodeTitle}} has been added to {{libraryName}} library."
              }
            }
          },
          "testData": {
            "description": "The keys of the testData object will match the list of variables. The values will be the data used when sending a test notification.",
            "type": "object",
            "properties": {
              "libraryItemId": {
                "type": "string",
                "example": "li_notification_test"
              },
              "libraryId": {
                "type": "string",
                "example": "lib_test"
              },
              "libraryName": {
                "type": "string",
                "example": "Podcasts"
              },
              "podcastTitle": {
                "type": "string",
                "example": "Abs Test Podcast"
              },
              "episodeId": {
                "type": "string",
                "example": "ep_notification_test"
              },
              "episodeTitle": {
                "type": "string",
                "example": "Successful Test"
              }
            }
          }
        }
      },
      "oldPlaybackSessionId": {
        "description": "The ID of playback sessions on server version 2.2.23 and before.",
        "type": "string",
        "format": "play_[a-z0-9]{18}",
        "example": "play_o78uaoeuh78h6aoeif"
      },
      "newPlaybackSessionId": {
        "type": "string",
        "description": "The ID of playback sessions after 2.3.0.",
        "format": "uuid",
        "example": "e4bb1afb-4a4f-4dd6-8be0-e615d233185b"
      },
      "playbackSessionId": {
        "type": "string",
        "anyOf": [
          {
            "$ref": "#/components/schemas/oldPlaybackSessionId"
          },
          {
            "$ref": "#/components/schemas/newPlaybackSessionId"
          }
        ]
      },
      "playMethod": {
        "type": "integer",
        "oneOf": [
          {
            "title": "Direct Play",
            "const": 0,
            "description": "Direct play media from server without transcoding"
          },
          {
            "title": "Direct Stream",
            "const": 1,
            "description": "Direct stream media from server without transcoding"
          },
          {
            "title": "Transcode",
            "const": 2,
            "description": "Server is transcoding media for client"
          },
          {
            "title": "Local",
            "const": 3,
            "description": "Client is playing from a local file"
          }
        ]
      },
      "playbackSessionBase": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/playbackSessionId"
          },
          "userId": {
            "description": "The ID of the user the playback session is for.",
            "type": "string",
            "example": "root"
          },
          "libraryId": {
            "$ref": "#/components/schemas/libraryId"
          },
          "libraryItemId": {
            "$ref": "#/components/schemas/libraryItemId"
          },
          "episodeId": {
            "description": "The ID of the podcast episode. Will be null if this playback session was started without an episode ID.",
            "type": "string",
            "example": "ep_lh6ko39pumnrma3dhv"
          },
          "mediaType": [
            {
              "$ref": "#/components/schemas/mediaType"
            }
          ],
          "mediaMetadata": {
            "description": "The metadata of the library item's media.",
            "type": "object",
            "additionalProperties": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/bookMetadata"
                },
                {
                  "$ref": "#/components/schemas/podcastMetadata"
                }
              ]
            }
          },
          "chapters": {
            "description": "If the library item is a book, the chapters it contains.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/bookChapter"
            }
          },
          "displayTitle": {
            "description": "The title of the playing item to show to the user.",
            "type": "string",
            "example": "Pilot"
          },
          "displayAuthor": {
            "description": "The author of the playing item to show to the user.",
            "type": "string",
            "example": "Night Vale Presents"
          },
          "coverPath": {
            "description": "The cover path of the library item's media.",
            "type": "string",
            "example": "/metadata/items/li_bufnnmp4y5o2gbbxfm/cover.jpg"
          },
          "duration": {
            "$ref": "#/components/schemas/durationSec"
          },
          "playMethod": {
            "description": "What play method the playback session is using. See below for values.",
            "type": {
              "$ref": "#/components/schemas/playMethod"
            }
          },
          "mediaPlayer": {
            "description": "The given media player when the playback session was requested.",
            "type": "string",
            "example": "unknown"
          },
          "deviceInfo": {
            "$ref": "#/components/schemas/deviceInfo"
          },
          "serverVersion": {
            "description": "The server version the playback session was started with.",
            "type": "string",
            "example": "2.4.4"
          },
          "date": {
            "description": "The day (in the format YYYY-MM-DD) the playback session was started.",
            "type": "string",
            "example": "2022-11-11",
            "format": "date"
          },
          "dayOfWeek": {
            "description": "The day of the week the playback session was started.",
            "type": "string",
            "example": "Friday"
          },
          "timeListening": {
            "description": "The amount of time (in seconds) the user has spent listening using this playback session.",
            "type": "number",
            "example": 0
          },
          "startTime": {
            "description": "The time (in seconds) where the playback session started.",
            "type": "number",
            "example": 0
          },
          "currentTime": {
            "description": "The current time (in seconds) of the playback position.",
            "type": "number",
            "example": 0
          },
          "startedAt": {
            "description": "The time (in ms since POSIX epoch) when the playback session was started.",
            "type": "integer",
            "example": 1668206493239
          },
          "updatedAt": {
            "$ref": "#/components/schemas/updatedAt"
          }
        }
      },
      "playbackSession": {
        "type": "object",
        "description": "A playback session for a user",
        "allOf": [
          {
            "$ref": "#/components/schemas/playbackSessionBase"
          }
        ]
      },
      "playbackSessionExpanded": {
        "type": [
          "object",
          "null"
        ],
        "description": "An expanded playback session for a user",
        "allOf": [
          {
            "$ref": "#/components/schemas/playbackSessionBase"
          },
          {
            "type": "object",
            "properties": {
              "audioTracks": {
                "description": "The audio tracks that are being played with the playback session.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/audioFile"
                }
              },
              "videoTrack": {
                "description": "The video track that is being played with the playback session. Will be null if the playback session is for a book or podcast. (Video Track Object does not exist)",
                "type": [
                  "string",
                  "null"
                ]
              },
              "libraryItem": {
                "$ref": "#/components/schemas/libraryItemExpanded"
              }
            }
          }
        ]
      },
      "playlist": {
        "type": "object",
        "properties": {
          "id": {
            "description": "The ID of the playlist.",
            "type": "string",
            "example": "pl_qbwet64998s5ra6dcu"
          },
          "libraryId": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/oldLibraryId"
              },
              {
                "$ref": "#/components/schemas/newLibraryId"
              }
            ]
          },
          "userId": {
            "description": "The ID of the user the playlist belongs to.",
            "type": "string",
            "example": "root"
          },
          "name": {
            "description": "The playlist's name.",
            "type": "string",
            "example": "Favorites"
          },
          "description": {
            "description": "The playlist's description.",
            "type": [
              "string",
              "null"
            ]
          },
          "coverPath": {
            "description": "The path of the playlist's cover.",
            "type": [
              "string",
              "null"
            ]
          },
          "items": {
            "description": "The items in the playlist.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/playlistItem"
            }
          },
          "lastUpdate": {
            "description": "The time (in ms since POSIX epoch) when the playlist was last updated.",
            "type": "integer",
            "example": 1669623431313
          },
          "createdAt": {
            "$ref": "#/components/schemas/createdAt"
          }
        }
      },
      "playlistExpanded": {
        "type": "object",
        "properties": {
          "id": {
            "description": "The ID of the playlist.",
            "type": "string",
            "example": "pl_qbwet64998s5ra6dcu"
          },
          "libraryId": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/oldLibraryId"
              },
              {
                "$ref": "#/components/schemas/newLibraryId"
              }
            ]
          },
          "userId": {
            "description": "The ID of the user the playlist belongs to.",
            "type": "string",
            "example": "root"
          },
          "name": {
            "description": "The playlist's name.",
            "type": "string",
            "example": "Favorites"
          },
          "description": {
            "description": "The playlist's description.",
            "type": [
              "string",
              "null"
            ]
          },
          "coverPath": {
            "description": "The path of the playlist's cover.",
            "type": [
              "string",
              "null"
            ]
          },
          "items": {
            "description": "The items in the playlist.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/playlistItemExpanded"
            }
          },
          "lastUpdate": {
            "description": "The time (in ms since POSIX epoch) when the playlist was last updated.",
            "type": "integer",
            "example": 1669623431313
          },
          "createdAt": {
            "$ref": "#/components/schemas/createdAt"
          }
        }
      },
      "playlistItem": {
        "type": "object",
        "properties": {
          "libraryItemId": {
            "description": "The ID of the library item the playlist item is for.",
            "type": "string",
            "example": "li_8gch9ve09orgn4fdz8"
          },
          "episodeId": {
            "description": "The ID of the podcast episode the playlist item is for.",
            "type": [
              "string",
              "null"
            ]
          }
        }
      },
      "playlistItemExpanded": {
        "type": "object",
        "properties": {
          "libraryItemId": {
            "description": "The ID of the library item the playlist item is for.",
            "type": "string",
            "example": "li_8gch9ve09orgn4fdz8"
          },
          "episodeId": {
            "description": "The ID of the podcast episode the playlist item is for.",
            "type": [
              "string",
              "null"
            ]
          },
          "episode": {
            "$ref": "#/components/schemas/podcastEpisodeExpanded"
          },
          "libraryItem": {
            "description": "The library item the playlist item is for. Will be Library Item Minified if episodeId is not null.",
            "type": "object",
            "additionalProperties": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/libraryItemMinified"
                },
                {
                  "$ref": "#/components/schemas/libraryItemExpanded"
                }
              ]
            }
          }
        }
      },
      "librarySettings": {
        "type": "object",
        "properties": {
          "coverAspectRatio": {
            "type": "integer",
            "description": "Whether the library should use square book covers. Must be 0 (for false) or 1 (for true).",
            "default": 1,
            "example": 1
          },
          "disableWatcher": {
            "type": "boolean",
            "description": "Whether to disable the folder watcher for the library.",
            "default": false,
            "example": false
          },
          "skipMatchingMediaWithAsin": {
            "type": "boolean",
            "description": "Whether to skip matching books that already have an ASIN.",
            "default": false,
            "example": false
          },
          "skipMatchingMediaWithIsbn": {
            "type": "boolean",
            "description": "Whether to skip matching books that already have an ISBN.",
            "default": false,
            "example": false
          },
          "autoScanCronExpression": {
            "description": "The cron expression for when to automatically scan the library folders. If null, automatic scanning will be disabled.",
            "default": null,
            "type": [
              "string",
              "null"
            ]
          }
        }
      },
      "notificationSettings": {
        "type": "object",
        "properties": {
          "id": {
            "description": "The ID of the notification settings.",
            "type": "string",
            "example": "notification-settings"
          },
          "appriseType": {
            "description": "The type of Apprise that will be used. At the moment, only api is available.",
            "type": [
              "string",
              "null"
            ],
            "example": "api"
          },
          "appriseApiUrl": {
            "description": "The full URL where the Apprise API to use is located.",
            "type": "string",
            "example": "https://apprise.example.com/notify",
            "format": "url"
          },
          "notifications": {
            "description": "The set notifications.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/notification"
            }
          },
          "maxFailedAttempts": {
            "description": "The maximum number of times a notification fails before being disabled.",
            "type": "integer",
            "example": 5
          },
          "maxNotificationQueue": {
            "description": "The maximum number of notifications in the notification queue before events are ignored.",
            "type": "integer",
            "example": 20
          },
          "notificationDelay": {
            "description": "The time (in ms) between notification pushes.",
            "type": "integer",
            "example": 1000
          }
        }
      },
      "serverSettings": {
        "type": "object",
        "properties": {
          "id": {
            "description": "The ID of the server settings.",
            "type": "string",
            "example": "server-settings"
          },
          "scannerFindCovers": {
            "description": "Whether the scanner will attempt to find a cover if your audiobook does not have an embedded cover or a cover image inside the folder. Note that This will extend scan time.",
            "type": "boolean",
            "example": false
          },
          "scannerCoverProvider": {
            "description": "If scannerFindCovers is true, which metadata provider to use. See Metadata Providers for options.",
            "type": "string",
            "example": "google"
          },
          "scannerParseSubtitle": {
            "description": "Whether to extract subtitles from audiobook folder names. Subtitles must be separated by -, i.e. /audiobooks/Book Title - A Subtitle Here/ has the subtitle A Subtitle Here.",
            "type": "boolean",
            "example": false
          },
          "scannerPreferAudioMetadata": {
            "description": "Whether to use audio file ID3 meta tags instead of folder names for book details.",
            "type": "boolean",
            "example": false
          },
          "scannerPreferOpfMetadata": {
            "description": "Whether to use OPF file metadata instead of folder names for book details.",
            "type": "boolean",
            "example": false
          },
          "scannerPreferMatchedMetadata": {
            "description": "Whether matched data will override item details when using Quick Match. By default, Quick Match will only fill in missing details.",
            "type": "boolean",
            "example": false
          },
          "scannerDisableWatcher": {
            "description": "Whether to disable the automatic adding/updating of items when file changes are detected. Requires server restart for changes to take effect.",
            "type": "boolean",
            "example": true
          },
          "scannerPreferOverdriveMediaMarker": {
            "description": "Whether to use the custom metadata in MP3 files from Overdrive for chapter timings automatically.",
            "type": "boolean",
            "example": false
          },
          "scannerUseTone": {
            "description": "Should use tone to extract metadata",
            "type": "boolean",
            "example": false
          },
          "storeCoverWithItem": {
            "description": "Whether to store covers in the library item's folder. By default, covers are stored in /metadata/items. Only one file named cover will be kept.",
            "type": "boolean",
            "example": false
          },
          "storeMetadataWithItem": {
            "description": "Whether to store metadata files in the library item's folder. By default, metadata files are stored in /metadata/items. Uses the .abs file extension.",
            "type": "boolean",
            "example": false
          },
          "metadataFileFormat": {
            "description": "Must be either json or abs",
            "type": "string",
            "example": "json"
          },
          "rateLimitLoginRequests": {
            "description": "The maximum number of login requests per rateLimitLoginWindow.",
            "type": "integer",
            "example": 10
          },
          "rateLimitLoginWindow": {
            "description": "The length (in ms) of each login rate limit window.",
            "type": "integer",
            "example": 600000
          },
          "backupSchedule": {
            "description": "The cron expression for when to do automatic backups.",
            "type": "string",
            "example": "30 1 * * *"
          },
          "backupsToKeep": {
            "description": "The number of backups to keep.",
            "type": "integer",
            "example": 2
          },
          "maxBackupSize": {
            "description": "The maximum backup size (in GB) before they fail, a safeguard against misconfiguration.",
            "type": "integer",
            "example": 1
          },
          "backupMetadataCovers": {
            "description": "Whether backups should include library item covers and author images located in metadata.",
            "type": "boolean",
            "example": true
          },
          "loggerDailyLogsToKeep": {
            "description": "The number of daily logs to keep.",
            "type": "integer",
            "example": 7
          },
          "loggerScannerLogsToKeep": {
            "description": "The number of scanner logs to keep.",
            "type": "integer",
            "example": 2
          },
          "homeBookshelfView": {
            "description": "Whether the home page should use a skeuomorphic design with wooden shelves.",
            "type": "integer",
            "example": 1
          },
          "bookshelfView": {
            "description": "Whether other bookshelf pages should use a skeuomorphic design with wooden shelves.",
            "type": "integer",
            "example": 1
          },
          "sortingIgnorePrefix": {
            "description": "Whether to ignore prefixes when sorting. For example, for the prefix the, the book title The Book Title would sort as Book Title, The.",
            "type": "boolean",
            "example": false
          },
          "sortingPrefixes": {
            "description": "If sortingIgnorePrefix is true, what prefixes to ignore.",
            "type": "array",
            "items": {
              "type": "string",
              "example": "the - a"
            }
          },
          "chromecastEnabled": {
            "description": "Whether to enable streaming to Chromecast devices.",
            "type": "boolean",
            "example": false
          },
          "dateFormat": {
            "description": "What date format to use. Options are MM/dd/yyyy, dd/MM/yyyy, dd.MM.yyyy, yyyy-MM-dd, MMM do, yyyy, MMMM do, yyyy, dd MMM yyyy, or dd MMMM yyyy.",
            "type": "string",
            "example": "MM/dd/yyyy"
          },
          "timeFormat": {
            "description": "What time format to use. Options are HH:mm (24-hour) and h:mma (am/pm).",
            "type": "string",
            "example": "HH:mm"
          },
          "language": {
            "description": "The default server language.",
            "type": "string",
            "example": "en-us"
          },
          "logLevel": {
            "description": "What log level the server should use when logging. 1 for debug, 2 for info, or 3 for warnings.",
            "type": "integer",
            "example": 2
          },
          "version": {
            "description": "The server's version.",
            "type": "string",
            "example": "2.2.5"
          }
        }
      },
      "stream": {
        "type": "object",
        "properties": {
          "id": {
            "description": "The ID of the stream. It will be the same as the ID of the playback session that the stream is for.",
            "type": "string",
            "example": "play_c786zm3qtjz6bd5q3n"
          },
          "userId": {
            "description": "The ID of the user that started the stream.",
            "type": "string",
            "example": "root"
          },
          "libraryItem": {
            "$ref": "#/components/schemas/libraryItemExpanded"
          },
          "episode": {
            "$ref": "#/components/schemas/podcastEpisodeExpanded"
          },
          "segmentLength": {
            "description": "The length (in seconds) of each segment of the stream.",
            "type": "integer",
            "example": 6
          },
          "playlistPath": {
            "description": "The path on the server of the stream output.",
            "type": "string",
            "example": "/metadata/streams/play_c786zm3qtjz6bd5q3n/output.m3u8"
          },
          "clientPlaylistUri": {
            "description": "The URI path for the client to access the stream.",
            "type": "string",
            "example": "/hls/play_c786zm3qtjz6bd5q3n/output.m3u8"
          },
          "startTime": {
            "description": "The time (in seconds) where the playback session started.",
            "type": "integer",
            "example": 0
          },
          "segmentStartNumber": {
            "description": "The segment where the transcoding began.",
            "type": "integer",
            "example": 0
          },
          "isTranscodeComplete": {
            "description": "Whether transcoding is complete.",
            "type": "boolean",
            "example": false
          }
        }
      },
      "streamProgress": {
        "type": "object",
        "properties": {
          "stream": {
            "description": "The ID of the stream the progress is for.",
            "type": "string",
            "example": "play_c786zm3qtjz6bd5q3n"
          },
          "percent": {
            "description": "A human-readable percentage of transcode completion.",
            "type": "string",
            "example": "8.66%"
          },
          "chunks": {
            "description": "The segment ranges that have been transcoded.",
            "type": "array",
            "items": {
              "type": "string",
              "example": "0-536"
            }
          },
          "numSegments": {
            "description": "The total number of segments of the stream.",
            "type": "integer",
            "example": 6200
          }
        }
      },
      "audioBookmark": {
        "type": "object",
        "properties": {
          "libraryItemId": {
            "description": "The ID of the library item the bookmark is for.",
            "type": "string",
            "example": "li_8gch9ve09orgn4fdz8"
          },
          "title": {
            "description": "The title of the bookmark.",
            "type": "string",
            "example": "the good part"
          },
          "time": {
            "description": "The time (in seconds) the bookmark is at in the book.",
            "type": "integer",
            "example": 16
          },
          "createdAt": {
            "$ref": "#/components/schemas/createdAt"
          }
        }
      },
      "mediaProgress": {
        "type": "object",
        "properties": {
          "id": {
            "description": "The ID of the media progress. If the media progress is for a book, this will just be the libraryItemId. If for a podcast episode, it will be a hyphenated combination of the libraryItemId and episodeId.",
            "type": "string",
            "example": "li_bufnnmp4y5o2gbbxfm-ep_lh6ko39pumnrma3dhv"
          },
          "libraryItemId": {
            "description": "The ID of the library item the media progress is of.",
            "type": "string",
            "example": "li_bufnnmp4y5o2gbbxfm"
          },
          "episodeId": {
            "description": "The ID of the podcast episode the media progress is of. Will be null if the progress is for a book.",
            "type": [
              "string",
              "null"
            ],
            "example": "ep_lh6ko39pumnrma3dhv"
          },
          "duration": {
            "description": "The total duration (in seconds) of the media. Will be 0 if the media was marked as finished without the user listening to it.",
            "type": "number",
            "example": 1454.18449
          },
          "progress": {
            "description": "The percentage completion progress of the media. Will be 1 if the media is finished.",
            "type": "number",
            "example": 0.011193983371394644
          },
          "currentTime": {
            "description": "The current time (in seconds) of the user's progress. If the media has been marked as finished, this will be the time the user was at beforehand.",
            "type": "number",
            "example": 16.278117
          },
          "isFinished": {
            "description": "Whether the media is finished.",
            "type": "boolean",
            "example": false
          },
          "hideFromContinueListening": {
            "description": "Whether the media will be hidden from the \"Continue Listening\" shelf.",
            "type": "boolean",
            "example": false
          },
          "lastUpdate": {
            "description": "The time (in ms since POSIX epoch) when the media progress was last updated.",
            "type": "integer",
            "example": 1668120246620
          },
          "startedAt": {
            "description": "The time (in ms since POSIX epoch) when the media progress was created.",
            "type": "integer",
            "example": 1668120083771
          },
          "finishedAt": {
            "description": "The time (in ms since POSIX epoch) when the media was finished. Will be null if the media has is not finished.",
            "type": [
              "string",
              "null"
            ]
          }
        }
      },
      "mediaProgressWithMedia": {
        "type": "object",
        "properties": {
          "id": {
            "description": "The ID of the media progress. If the media progress is for a book, this will just be the libraryItemId. If for a podcast episode, it will be a hyphenated combination of the libraryItemId and episodeId.",
            "type": "string",
            "example": "li_bufnnmp4y5o2gbbxfm-ep_lh6ko39pumnrma3dhv"
          },
          "libraryItemId": {
            "description": "The ID of the library item the media progress is of.",
            "type": "string",
            "example": "li_bufnnmp4y5o2gbbxfm"
          },
          "episodeId": {
            "description": "The ID of the podcast episode the media progress is of. Will be null if the progress is for a book.",
            "type": [
              "string",
              "null"
            ],
            "example": "ep_lh6ko39pumnrma3dhv"
          },
          "duration": {
            "description": "The total duration (in seconds) of the media. Will be 0 if the media was marked as finished without the user listening to it.",
            "type": "number",
            "example": 1454.18449
          },
          "progress": {
            "description": "The percentage completion progress of the media. Will be 1 if the media is finished.",
            "type": "number",
            "example": 0.011193983371394644
          },
          "currentTime": {
            "description": "The current time (in seconds) of the user's progress. If the media has been marked as finished, this will be the time the user was at beforehand.",
            "type": "number",
            "example": 16.278117
          },
          "isFinished": {
            "description": "Whether the media is finished.",
            "type": "boolean",
            "example": false
          },
          "hideFromContinueListening": {
            "description": "Whether the media will be hidden from the \"Continue Listening\" shelf.",
            "type": "boolean",
            "example": false
          },
          "lastUpdate": {
            "description": "The time (in ms since POSIX epoch) when the media progress was last updated.",
            "type": "integer",
            "example": 1668120246620
          },
          "startedAt": {
            "description": "The time (in ms since POSIX epoch) when the media progress was created.",
            "type": "integer",
            "example": 1668120083771
          },
          "finishedAt": {
            "description": "The time (in ms since POSIX epoch) when the media was finished. Will be null if the media has is not finished.",
            "type": [
              "string",
              "null"
            ]
          },
          "media": {
            "description": "The media of the library item the media progress is for.",
            "type": "object",
            "additionalProperties": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/bookExpanded"
                },
                {
                  "$ref": "#/components/schemas/podcastExpanded"
                }
              ]
            }
          },
          "episode": {
            "$ref": "#/components/schemas/podcastEpisode"
          }
        }
      },
      "user": {
        "type": "object",
        "properties": {
          "id": {
            "description": "The ID of the user. Only the root user has the root ID.",
            "type": "string",
            "example": "root"
          },
          "username": {
            "description": "The username of the user.",
            "type": "string",
            "example": "root"
          },
          "type": {
            "description": "The type of the user. Will be root, guest, user, or admin. There will be only one root user which is created when the server first starts.",
            "type": "string",
            "example": "root"
          },
          "token": {
            "description": "The authentication token of the user.",
            "type": "string",
            "example": "exJhbGciOiJI6IkpXVCJ9.eyJ1c2Vyi5NDEyODc4fQ.ZraBFohS4Tg39NszY"
          },
          "mediaProgress": {
            "description": "The user's media progress.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/mediaProgress"
            }
          },
          "seriesHideFromContinueListening": {
            "description": "The IDs of series to hide from the user's \"Continue Series\" shelf.",
            "type": "array",
            "items": {
              "type": "string",
              "example": "..."
            }
          },
          "bookmarks": {
            "description": "The user's bookmarks.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/audioBookmark"
            }
          },
          "isActive": {
            "description": "Whether the user's account is active.",
            "type": "boolean",
            "example": true
          },
          "isLocked": {
            "description": "Whether the user is locked.",
            "type": "boolean",
            "example": false
          },
          "lastSeen": {
            "description": "The time (in ms since POSIX epoch) when the user was last seen by the server. Will be null if the user has never logged in.",
            "type": "integer",
            "example": 1668296147437
          },
          "createdAt": {
            "$ref": "#/components/schemas/createdAt"
          },
          "permissions": {
            "$ref": "#/components/schemas/userPermissions"
          },
          "librariesAccessible": {
            "description": "The IDs of libraries accessible to the user. An empty array means all libraries are accessible.",
            "type": "array",
            "items": {
              "type": "string",
              "example": "..."
            }
          },
          "itemTagsAccessible": {
            "description": "The tags accessible to the user. An empty array means all tags are accessible.",
            "type": "array",
            "items": {
              "type": "string",
              "example": "..."
            }
          }
        }
      },
      "userWithProgressDetails": {
        "type": "object",
        "properties": {
          "id": {
            "description": "The ID of the user. Only the root user has the root ID.",
            "type": "string",
            "example": "root"
          },
          "username": {
            "description": "The username of the user.",
            "type": "string",
            "example": "root"
          },
          "type": {
            "description": "The type of the user. Will be root, guest, user, or admin. There will be only one root user which is created when the server first starts.",
            "type": "string",
            "example": "root"
          },
          "token": {
            "description": "The authentication token of the user.",
            "type": "string",
            "example": "exJhbGciOiJI6IkpXVCJ9.eyJ1c2Vyi5NDEyODc4fQ.ZraBFohS4Tg39NszY"
          },
          "mediaProgress": {
            "description": "The user's media progress.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/mediaProgressWithMedia"
            }
          },
          "seriesHideFromContinueListening": {
            "description": "The IDs of series to hide from the user's \"Continue Series\" shelf.",
            "type": "array",
            "items": {
              "type": "string",
              "example": "..."
            }
          },
          "bookmarks": {
            "description": "The user's bookmarks.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/audioBookmark"
            }
          },
          "isActive": {
            "description": "Whether the user's account is active.",
            "type": "boolean",
            "example": true
          },
          "isLocked": {
            "description": "Whether the user is locked.",
            "type": "boolean",
            "example": false
          },
          "lastSeen": {
            "description": "The time (in ms since POSIX epoch) when the user was last seen by the server. Will be null if the user has never logged in.",
            "type": "integer",
            "example": 1668296147437
          },
          "createdAt": {
            "$ref": "#/components/schemas/createdAt"
          },
          "permissions": {
            "$ref": "#/components/schemas/userPermissions"
          },
          "librariesAccessible": {
            "description": "The IDs of libraries accessible to the user. An empty array means all libraries are accessible.",
            "type": "array",
            "items": {
              "type": "string",
              "example": "..."
            }
          },
          "itemTagsAccessible": {
            "description": "The tags accessible to the user. An empty array means all tags are accessible.",
            "type": "array",
            "items": {
              "type": "string",
              "example": "..."
            }
          }
        }
      },
      "userWithSession": {
        "type": "object",
        "properties": {
          "id": {
            "description": "The ID of the user. Only the root user has the root ID.",
            "type": "string",
            "example": "root"
          },
          "username": {
            "description": "The username of the user.",
            "type": "string",
            "example": "root"
          },
          "type": {
            "description": "The type of the user. Will be root, guest, user, or admin. There will be only one root user which is created when the server first starts.",
            "type": "string",
            "example": "root"
          },
          "session": {
            "$ref": "#/components/schemas/playbackSessionExpanded"
          },
          "lastSeen": {
            "description": "The time (in ms since POSIX epoch) when the user was last seen by the server. Will be null if the user has never logged in.",
            "type": "integer",
            "example": 1668296147437
          },
          "createdAt": {
            "$ref": "#/components/schemas/createdAt"
          }
        }
      },
      "userPermissions": {
        "type": "object",
        "properties": {
          "download": {
            "description": "Whether the user can download items to the server.",
            "type": "boolean",
            "example": true
          },
          "update": {
            "description": "Whether the user can update library items.",
            "type": "boolean",
            "example": true
          },
          "delete": {
            "description": "Whether the user can delete library items.",
            "type": "boolean",
            "example": true
          },
          "upload": {
            "description": "Whether the user can upload items to the server.",
            "type": "boolean",
            "example": true
          },
          "accessAllLibraries": {
            "description": "Whether the user can access all libraries.",
            "type": "boolean",
            "example": true
          },
          "accessAllTags": {
            "description": "Whether the user can access all tags.",
            "type": "boolean",
            "example": true
          },
          "accessExplicitContent": {
            "description": "Whether the user can access explicit content.",
            "type": "boolean",
            "example": true
          }
        }
      }
    }
  },
  "tags": []
}